//
//  (c) Copyright 2007 Seagate LLC.
//  All Rights Reserved.
//
//  NOTICE: This file contains source code, ideas, techniques, and 
//  information (the Information) which are Proprietary and Confidential 
//  Information of Seagate LLC. This Information may not be used by or 
//  disclosed to any third party except under written license, and shall 
//  be subject to the limitations prescribed under license.
//
//  [2007/10/01] Seagate HGA Automation
//
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using Seagate.AAS.Parsel.Device.RFID;
using Seagate.AAS.Parsel.Device.RFID.Hga;

namespace Test_RFID
{
    public partial class MainTestForm : Form
    {
        public MainTestForm()
        {
            InitializeComponent();
        }

        private void btnTestHgaFola_Click(object sender, EventArgs e)
        {
            //FolaTagDataForm form = new FolaTagDataForm();
            //form.ShowDialog();

            FolaReader folaTag = new FolaReader();
            FolaTagData folaData = new FolaTagData();
            try
            {
                // Don't forget to place file GCL52FW.DLL and RFID.DLL in the same directory with this executable file
                // Both files are in "lib" directory

                // FOLA = Read/Write Carrier Tag

                folaTag.PortSettings.PortName = "COM9"; // Don't need to set another values (baud rate, parity, databit, stopbit) , leave them default.
                folaTag.Initialize(false);

                // --- Read ----
                folaTag.ReadRFIDTag(0, ref folaData);  // Read from Head 0
                //folaData.CarrierID <- Carrier ID
                // folaData.WorkOrder <- WorkOrder
                // folaData.WorkOrderVersion <- WorkOrder Version
                // folaData[0].HgaSN <-- 1st HGA Serial Number
                // folaData[0].Status <-- 1st HGA Status
                // .....
                // .....
                // folaData[9].HgaSN <-- last HGA Serial Number
                // folaData[9].Status <-- last HGA Status

                //folaData[0].HgaSN = "DDDDDDDDDD";
                //folaData[0].Status = 'A';
                //folaData.SetProcessStepData(5, 'V', new StringBuilder("ZZZZZZ"));
                //folaData.LastStep = 6;
                //folaData.ProcStep[5].StationCode = folaData.ProcStep[4].StationCode;
                //folaData.ProcStep[5].ProcessRecipe = folaData.ProcStep[4].ProcessRecipe;
                //folaData.LastStep = 8;

                //folaTag.WriteRFIDTag(0, folaData);

                //folaData = folaTag.ReadRFIDTag(0);

                // --- Write ----

                //folaData[0].HgaSN = "XYZ100001D"; // 10 digig HGA serial number , for loading S/N will be generated by the machine 
                //// the s/n is generated from carrier id(3)+slot(1)+cycle count(5)+check sum(1) = totally 10 digit
                //// use below functions to generate serial number
                //folaData[0].Status = 'A'; // HGA Status A = Pass , B = Fail
                //// .....
                //folaData[9].HgaSN = "XYZA00001Z";
                //folaData[9].Status = 'A';


                //// For CLU , write count must be plus one everytime 
                //folaData.WriteCount++;

                //// Get Process Step from WorkOrder [Process]
                //folaData.ProcStep[0].StationCode = 'A'; // <-- ProcessStep1=A
                //folaData.ProcStep[0].ProcessRecipe = "SLS-1"; // <-- ProgramName1=SLS-1
                //folaData.ProcStep[1].StationCode = 'C'; // <-- ProcessStep2=C
                //folaData.ProcStep[1].ProcessRecipe = "SAS-1"; // <-- ProgramName2=SAS-1
                //folaData.ProcStep[2].StationCode = 'Q'; // <-- ProcessStep3=Q
                //folaData.ProcStep[2].ProcessRecipe = "SUL-1"; // <-- ProgramName3=SUL-1
                //folaData.ProcStep[3].StationCode = ' ';
                //folaData.ProcStep[3].ProcessRecipe = "";
                //// .....
                //folaData.ProcStep[folaData.MaxProcStep - 1].StationCode = ' ';
                //folaData.ProcStep[folaData.MaxProcStep - 1].ProcessRecipe = "";

                //folaData.LastStep = 1; // CLU Load Module is station code A , process step = 1 <- set laststep = process step

                // WriteRFIDTag(RFHead rfHead, FolaTagData tag, bool reReadBeforeWrite, bool writeProcessStep)
                // reReadBeforeWrite , true = compare the carrierID inside the RF tag and carrierID inside FolaTagData before writing to prevent wrong carrier writing.
                // writeProcessStep , true = write Process Step/Setup File too, For CLU must set as true.
                // WriteRFIDTag will not write CarrierID
                //folaTag.WriteRFIDTag(0, folaData, true);

                //byte checksum = folaTag.ReadCheckSum(0);
                //folaTag.WriteCheckSum(0, 0xac);

                MessageBox.Show("Done");

            }
            catch (ExceptionRFID ex)
            {
                MessageBox.Show(ex.Message);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            folaTag.ShutDown();
        }

        private void btnTestHgaBola_Click(object sender, EventArgs e)
        {
            //BolaTagDataForm form = new BolaTagDataForm();
            //form.ShowDialog();

            BolaReader bolaTag = new BolaReader();
            BolaTagData bolaData = new BolaTagData();
            try
            {
                // BOLA = Read/Write Bola Tag
                //  BolaReader csRFID = new BolaReader();
                // csRFID.PortSettings.PortName = "COM3";
                //  csRFID.Initialize(false);
                // BolaTag csBolaTag = new BolaTag();

                //   bolaTag.Simulation = true;
                bolaTag.PortSettings.PortName = "COM9"; // Don't need to set another values (baud rate, parity, databit, stopbit) , leave them default.
                bolaTag.Initialize(false);


                // Read
                bolaTag.ReadRFIDTag(0, ref bolaData); // Read from Head 0
                // bolaData.TrayID <-- TrayID
                // ...
                // bolaData[0].HgaSN <-- 1st HGA Serial Number
                // bolaData[0].Status <-- 1st HGA Status
                // .....
                // .....
                // bolaData[19].HgaSN <-- last HGA Serial Number
                // bolaData[19].Status <-- last HGA Status


                // Write
                //bolaData.TrayID = "XXX";
                //bolaData.WorkOrderVersion = '2';
                //bolaData[0].HgaSN = "9999999999";
                //bolaData[0].Status = 'B';

                //bolaData.VendorCode = 8; // From machine config file , 8 = Teparuk , 9 = Korat
                //bolaData.PartNumber = "123433444"; // From WorkOrder , HGAPartNumber=123433444
                //bolaData.Tab = 'D'; // From last digit of workorder name , WorkOrder=P012345D
                //bolaData.TrayType = 50; // From workOrder , TrayType=50
                //bolaData.LastStep = 3; // CLU UnLoad Module is station code Q , process step = 3 <- set laststep = process step

                //[Process]
                //NumberOfSteps=3
                //ProcessStep1=A
                //ProgramName1=SLS-1
                //ProcessStep2=C
                //ProgramName2=SAS-1
                //ProcessStep3=Q  <--- CLU Unload <- Last Step = 3
                //ProgramName3=SUL-1
                //bolaData.LastStep = 2;
                //bolaData.Tab = 'U';
                //bolaData.VendorCode = 10;

                //byte checksum = bolaTag.ReadCheckSum(0);
                //bolaTag.WriteCheckSum(0, 0xbf);

                //bolaTag.WriteRFIDTag(0, bolaData, false);
                MessageBox.Show("Done");                
            }
            catch (ExceptionRFID ex)
            {
                MessageBox.Show(ex.Message);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            bolaTag.ShutDown();
        }

        private void btnHgaFolaPanel_Click(object sender, EventArgs e)
        {
            FolaTagDataForm formFola = new FolaTagDataForm();
            formFola.ReadOnly = false;
            formFola.ShowDialog();
        }

        private void btnHgaBolaPanel_Click(object sender, EventArgs e)
        {
            BolaTagDataForm formBola = new BolaTagDataForm();
            formBola.ReadOnly = false;
            formBola.ShowDialog();
        }
    }
}