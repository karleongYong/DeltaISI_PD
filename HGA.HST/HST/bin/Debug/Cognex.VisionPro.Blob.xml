<?xml version="1.0"?><doc><assembly><name>Cognex.VisionPro.Blob</name></assembly><members><member name="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImageException"><summary>The exception that is thrown when the segmentation mode is 'SubtractionImage' and the subtraction image was null.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImagePixelsException"><summary>The exception that is thrown when the segmentation mode is 'SubtractionImage' and the subtraction image has no pixels.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogBlobSubtractionImageAlignmentErrorException"><summary>The exception that is thrown when the segmentation mode is 'SubtractionImage' and the subtraction image does not completely overlap the processed region of the input image.  This exception usually occurs because the subtraction image is too small or because incorrect offset values were supplied.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageErrorException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage" /> is set to False but the corresponding bit is set in the LastRunRecordDiagEnable property of the blob tool.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageBeforeMaskingErrorException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking" /> is set to False but the corresponding bit is set in the LastRunRecordDiagEnable property of the blob tool.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageBeforeMorphologyErrorException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology" /> is set to False but the corresponding bit is set in the LastRunRecordDiagEnable property of the blob tool.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException"><summary>The exception that is thrown when the connectivity mode is 'WholeImageGreyScale' and you have requested one of the following measurements: BoundaryPixelLength, Acircularity, AcircularityRms, or Perimeter.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogBlobDuplicateMeasureException"><summary>The exception that is thrown when the <see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> you are adding to the collection of run-time measures has the same measure as an existing member of the collection.  Only one object per measure is allowed.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogBlobDynamicThresholdNotComputedException"><summary>The exception that is thrown when the segmentation mode is 'HardDynamicThreshold' but a dynamic threshold could not be computed, probably because you specified the same value for both the low and high tail percentages.  Or because the input image contains only a very small range of grey levels.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogBlobEntireBlobExcludedException"><summary>The exception that is thrown when the entire blob has been excluded because you specified an extrema exclusion setting greater than or equal to the area of the blob.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection"><summary>A collection of CogBlobMorphologyConstants indicating which morphology operations are to be performed on the segmented image.  The operations are performed in the order in which they are added to the collection.  Operations can be added multiple times.</summary><remarks><PARA>
A collection of <see cref="T:Cognex.VisionPro.Blob.CogBlobMorphologyConstants" /> indicating which morphology operations are to be performed on the segmented image. The operations are performed in the order in which they are added to the collection. Operations can be added multiple times to repeat an operation.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.#ctor(Cognex.VisionPro.Blob.CogBlobMorphologyCollection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.IndexOf(Cognex.VisionPro.Blob.CogBlobMorphologyConstants)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Insert(Cognex.VisionPro.Blob.CogBlobMorphologyConstants,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Add(Cognex.VisionPro.Blob.CogBlobMorphologyConstants)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasure"><remarks><PARA>
Interface indicating how a specified measure will be used during execution of blob analysis.  Blob measures can either be used as filter criteria or precomputed such that the time required to calculate the measure is part of the blob analysis execution time.
</PARA></remarks><summary>Class indicating how a specified measure will be used during execution of blob analysis.  Blob measures can either be used as filter criteria or precomputed such the time required to calculate the measure is part of the blob analysis execution time.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.#ctor(Cognex.VisionPro.Blob.CogBlobMeasure)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfMeasure"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Measure may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Mode may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeLow"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FilterRangeLow may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FilterRangeHigh may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FilterMode may have changed.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterMode"><event cref="E:Cognex.VisionPro.Blob.CogBlobMeasure.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobMeasure_FilterMode--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterMode" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobFilterModeConstants" />.
	</para></exception><summary>This mode specifies how to interpret the filter range.  It dictates whether blobs whose measurement falls within the range will be included in, or excluded from, the filtered results.  The range limits are considered to be 'inside' the range.</summary><remarks><PARA>
Mode indicating how the filter range is to be interpreted. 
Specify <see cref="T:Cognex.VisionPro.Blob.CogBlobFilterModeConstants">ExcludeBlobsInRange</see>
to include only blobs that have a measurement value that is 
less than <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" /> or greater than <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
Specify <see cref="T:Cognex.VisionPro.Blob.CogBlobFilterModeConstants">IncludeBlobsInRange</see>
to include only blobs that have a measurement value that is greater than or equal to 
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" /> or less than or equal to <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
</PARA><DEFAULT>ExcludeBlobsInRange</DEFAULT></remarks><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
    </code><code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
    </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh"><summary>The high limit of the filter range.  Blobs whose measurement falls within this range will be included in, or excluded from, the filtered results depending on the FilterMode setting.  The high limit is considered to be 'inside' the range.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlobMeasure.Changed" cgnxEvent="singleState"><para>
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobMeasure_FilterRangeHigh--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeHigh" /></li></ul></event><event cref="E:Cognex.VisionPro.Blob.CogBlobMeasure.Changed" cgnxEvent="multiState"><para>
		Fires when both the low and high limits are changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_BlobMeasure_FilterRange--><li><see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeLow" /></li><li><see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeHigh" /></li></ul></event><remarks><PARA>
The high limit of the filter range.  The filter range specifies blobs to either include or exclude from the filtered results depending on the value
of <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterMode" />.
</PARA><PARA>
The value of <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" /> must be less than or equal to the value 
of <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />. If one of the values is set so that this 
is not true, the other value is adjusted appropriately.
</PARA><DEFAULT>0</DEFAULT></remarks><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
    </code><code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
    </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow"><event cref="E:Cognex.VisionPro.Blob.CogBlobMeasure.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobMeasure_FilterRangeLow--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeLow" /></li></ul></event><event cref="E:Cognex.VisionPro.Blob.CogBlobMeasure.Changed" cgnxEvent="multiState"><para>
		
		Fires when both the low and high limits are changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_BlobMeasure_FilterRange--><li><see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeLow" /></li><li><see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeHigh" /></li></ul></event><summary>The low limit of the filter range.  Blobs whose measurement falls within this range will be included in, or excluded from, the filtered results depending on the FilterMode setting.  The low limit is considered to be 'inside' the range.</summary><remarks><PARA>
The low limit of the filter range. The filter range specifies blobs to 
either include or exclude from the filtered results depending 
on the value of <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterMode" />.
</PARA><PARA>
The value of <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" /> must be less than or equal to the value 
of <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />. If one of the values is set so that this 
is not true, the other value is adjusted appropriately.
</PARA><DEFAULT>0</DEFAULT></remarks><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
    </code><code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
    </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.Mode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is not a member of
	<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants" />.</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlobMeasure.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobMeasure_Mode--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfMode" /></li></ul></event><summary>Mode indicating how the specified measure will be used during execution of blob analysis.  It may indicate no special run-time usage, the measure is to be used as a filter criterion, or that the measure will be computed at run-time.</summary><remarks><PARA>Mode that indicates how the measure is used during execution of blob analysis. 
</PARA><PARA> 
If this property is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">None</see>, 
no run-time action is taken regarding the measure.
If this property is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">Filter</see>, 
then the values specified for <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterMode" />, <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" />, 
and <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" /> are used to filter blobs at run time.
If this property is
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">PreCompute</see>, 
then the specified measure is computed at run-time for all blobs in the image.  
</PARA><PARA>
Note that by default, blob measures are only computed when your program specifically requests them. Specifying 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">PreCompute</see> forces the tool to compute the specified measure for all blobs at once, making it easier to determine how much time blob analysis requires during your program's operation.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">PreCompute</see></DEFAULT></remarks><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
    </code><code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
    </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.Measure"><summary>The measure for which usage during execution is being specified.</summary><remarks><PARA>The <see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">measure</see> for which usage during execution is being specified.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Area</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is not a member of
	<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants" />.</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlobMeasure.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobMeasure_Measure--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfMeasure" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasure.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection"><remarks><PARA>A collection indicating how the specified measures will be used during execution of blob analysis.  Blob measures can either be used as filter criteria or precomputed such that the time required to calculate the measure is part of the blob execution time.</PARA></remarks><summary>A collection indicating how the specified measures will be used during execution of blob analysis.  Blob measures can either be used as filter criteria or precomputed such the time required to calculate the measure is part of the blob execution time.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.#ctor(Cognex.VisionPro.Blob.CogBlobMeasureCollection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasureCollection.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasureCollection.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasureCollection.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobMeasureCollection.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.IndexOf(Cognex.VisionPro.Blob.CogBlobMeasure)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Insert(Cognex.VisionPro.Blob.CogBlobMeasure,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Add(Cognex.VisionPro.Blob.CogBlobMeasure)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams"><remarks><PARA>
Blob analysis provides numerous methods of 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="image_segmentation">segmenting</see> an 
image into object pixels and background pixels.  
This interface lets you control exactly how the image is segmented.
</PARA></remarks><summary>Class which holds image segmentation parameters.  Blob analysis provides numerous methods of segmenting an image into object and background pixels.  The primary interface of this class allows the user to select and configure the method of segmentation.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.#ctor(Cognex.VisionPro.Blob.CogBlobSegmentationParams)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Mode may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailLow"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TailLow may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TailHigh may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdLow"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SoftFixedThresholdLow may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SoftFixedThresholdHigh may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftness"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Softness may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdLow"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SoftRelativeThresholdLow may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SoftRelativeThresholdHigh may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfHardFixedThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HardFixedThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfHardRelativeThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HardRelativeThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubtractionImage may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImageOffsetX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubtractionImageOffsetX may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImageOffsetY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubtractionImageOffsetY may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfScalingValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ScalingValue may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPreMap"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPreMap may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPostMap"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPostMap may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetMap"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetMap may have changed.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue"><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_ScalingValue--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfScalingValue" /></li></ul></event><summary>Pixel value that represents a blob weight of 1.0, all other pixel values are are interpreted on a linear scale relative to ScalingValue.</summary><remarks><PARA>Pixel value that represents a blob weight of 1.0, all other pixel values are interpreted on a linear scale relative to ScalingValue.</PARA><PARA>This property is only useful if you are specifying 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">None</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">Map</see>, or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see>. You should make sure that no pixel in the input image has a value greater
than the scaling value, and you should also make sure that no value in the 
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetMap" />
or
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetPostMap" />
maps has a value greater than the 
scaling value.
</PARA><PARA>
This parameter is ignored for labeled connectivity.
</PARA><DEFAULT>255</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than or equal to 0 or greater than 255.</para></exception></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetY"><summary>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the run-time input image to the upper-left corner of the SubtractionImage in image coordinates of the input image.</summary><remarks><PARA>
The Y offset value in pixels of the <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />. 
The X and Y offset values measure the offset from the upper-left corner of the 
run-time input image to the upper-left corner of the 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" /> in image coordinates of the input image.
</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_SubtractionImageOffsetY--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImageOffsetY" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetX"><summary>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the run-time input image to the upper-left corner of the SubtractionImage in image coordinates of the input image.</summary><remarks><PARA>
The X offset value in pixels of the <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />. 
The X and Y offset values measure the offset from the upper-left corner of the 
run-time input image to the upper-left corner of the 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" /> in image coordinates of the input image.
</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_SubtractionImageOffsetX--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImageOffsetX" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage"><remarks><PARA>
The 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="threshold_image">subtraction (or threshold) image</see> 
used when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see>.  
</PARA><PARA>
The 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetX" /> and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetY" /> functions 
specify the pixel alignment of this image with the blob 
analysis InputImage.
</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>The subtraction image used when the segmentation mode is cogBlobSegmentationModeSubtractionImage.  The SubtractionImageOffsetX &amp; SubtractionImageOffsetY specify the pixel alignment of this image with the blob analysis InputImage.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_SubtractionImage--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImage" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity"><summary>Blob polarity used for image segmentation with either soft or hard thresholding.  Indicates either dark blobs on a light background or light blobs on a dark background.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_Polarity--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfPolarity" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants" />.</para></exception><remarks><PARA>
Blob 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">polarity</see> used for 
image segmentation with either soft or hard thresholding.  Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
for dark 
blobs on a light background or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>
for light blobs on a dark background.
</PARA><PARA>
This parameter is only used for the following segmentation modes:
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">HardDynamicThreshold</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">HardFixedThreshold</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">HardRelativeThreshold</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SoftFixedThreshold</see>, or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SoftRelativeThreshold</see>.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardRelativeThreshold"><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_HardRelativeThreshold--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfHardRelativeThreshold" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 0 or greater than 100.</para></exception><remarks><PARA>
A 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="relative_hard_thresholding">hard fixed threshold</see> 
is computed by determining the pixel value which lies at the specified percentage of the distance between the low tail pixel value and the high tail pixel value.  This computed threshold is then used to perform Hard-Fixed segmentation.
</PARA><PARA>
If <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> specifies light blobs,
 then pixels values that are greater than 
or equal to this 
computed threshold 
are part of the blob(s); pixel values that are less than this threshold are part of 
the background.  If <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> specifies 
dark blobs, then the ranges are inverted.
</PARA><DEFAULT>50</DEFAULT></remarks><summary>A fixed threshold is computed by determining the pixel value which lies at the specified percentage of the distance between the low tail pixel value and the high tail pixel value.  This computed threshold is then used to perform Hard-Fixed segmentation.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardFixedThreshold"><remarks><PARA>
If <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> specifies light blobs,
 then pixels values that are greater than 
or equal to this 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="hard_thresholding">hard threshold</see> are part of the blob(s); pixel values that are less than this threshold are part of 
the background.  If <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> specifies 
dark blobs, then the ranges are inverted.
</PARA><DEFAULT>128</DEFAULT></remarks><summary>If Polarity is light blobs then pixels values that are greater than or equal to this threshold are part of the blob(s); pixel values that are less than this threshold are part of the background.  If polarity is dark blobs then the ranges are inverted.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 0 or greater than 255.</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_HardFixedThreshold--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfHardFixedThreshold" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftRelativeThresholdHigh"><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_SoftRelativeThresholdHigh
--><ul /></event><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="multiState"><para>
		
		Fires when both the low and high threshold values are changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_BlobSegmentationParams_SoftRelativeThresholds--><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdLow" /></li><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdHigh" /></li></ul></event><summary>This relative threshold specifies a percentage of the distance between the low and high tail grey scale pixel values.  The grey scale pixel value determined by this relative percentage is then used as a soft, fixed threshold.</summary><remarks><PARA>
Soft relative thresholding computes a high soft threshold value by 
determining the pixel value which lies at the specified percentage 
of the distance between the low tail pixel value and the high tail pixel value. 
</PARA><PARA>
When 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> indicates light blobs,
pixel values that are greater than the computed high threshold are assigned a blob
weight equal to 1. 
The range of pixel values between the computed low and high threshold is
divided into <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" /> equally sized ranges.  Pixels with values
in each of these ranges are assigned values between 1 and
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />.  A segmentation value of 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />+1 corresponds to a
blob weight of one while all other segmentation values are
interpreted on a linear scale relative to <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />+1.
</PARA><PARA>
Pixel values that are greater than the computed high threshold are assigned a blob weight of 0 when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> indicates dark blobs.  
</PARA><PARA>
The low threshold must be less than or equal to the high threshold.
If a value is supplied such that this requirement is not met, both thresholds are
adjusted.
</PARA><DEFAULT>60</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 0 or greater than 100.</para></exception></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftRelativeThresholdLow"><remarks><PARA>
Soft relative thresholding computes a low soft threshold value by 
determining the pixel value which lies at the specified percentage 
of the distance between the low tail pixel value and the high tail pixel value. 
Pixel values that are less than the computed low threshold are assigned a blob weight of 0 when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> indicates light blobs.  
Pixel values that are less than the computed low threshold are assigned a blob weight of 1 when <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> indicates dark blobs.
</PARA><PARA>
The low threshold must be less than or equal to the high threshold.
If a value is supplied such that this requirement is not met, both thresholds are
adjusted.
</PARA><DEFAULT>40</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_SoftRelativeThresholdLow--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdLow" /></li></ul></event><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="multiState"><para>
		
		Fires when both the low and high threshold percentages are changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_BlobSegmentationParams_SoftRelativeThresholds--><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdLow" /></li><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdHigh" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 0 or greater than 100.</para></exception><summary>This relative threshold specifies a percentage of the distance between the low and high tail grey scale pixel values.  The grey scale pixel value determined by this relative percentage is then used as a soft, fixed threshold.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 0 or greater than 254.</para></exception><remarks><PARA>The number of intermediate weights separating blobs(1) and background(0).  Pixel values between the low and high threshold are assigned a blob weight between 0.0 and 1.0, exclusive.</PARA><DEFAULT>254</DEFAULT></remarks><summary>The maximum number of fractional weights between background pixels (whose weight is 0.0) and full-weight blob pixels (whose weight is 1.0).  The fractional weights are represented in the segmentation image by pixel values between 1 and softness.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_Softness--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftness" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftFixedThresholdHigh"><remarks><PARA>
When 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> indicates light blobs,
pixel values that are greater than the high threshold are assigned a blob
weight equal to 1.
The range of pixel values between the low and high threshold is
divided into <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" /> equally sized ranges.  Pixels with values
in each of these ranges are assigned values between 1 and
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />.  A segmentation value of 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />+1 corresponds to a
blob weight of one while all other segmentation values are
interpreted on a linear scale relative to <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />+1.
</PARA><PARA>
Pixel values that are greater than the high threshold are assigned a blob weight of 0 when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> indicates dark blobs.  
</PARA><PARA>
The low threshold must be less than the high threshold. 
If a value is supplied such that this requirement is not met, the other threshold
is adjusted.
</PARA></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_SoftFixedThresholdHigh--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdHigh" /></li></ul></event><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="multiState"><para>
		
		Fires when both the low and high thresholds are changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_BlobSegmentationParams_SoftFixedThresholds--><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdLow" /></li><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdHigh" /></li></ul></event><summary>Pixel values above(&gt;=) the high threshold are background (weight 0) or full-weight blob (weight 1) depending on the Polarity.  Values between the low and high thresholds are considered fractional blob (weight between 0 and 1, exclusive).  See Softness.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 1 or greater than 255.</para></exception></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftFixedThresholdLow"><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_SoftFixedThresholdLow--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdLow" /></li></ul></event><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="multiState"><para>
		
		Fires when both the low and high tail values are changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_BlobSegmentationParams_SoftFixedThresholds--><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdLow" /></li><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdHigh" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 0 or greater than 254.</para></exception><summary>Pixel values below the low threshold are background (weight 0) or full-weight blob (weight 1.0) depending on the Polarity.  Values between the low and high thresholds are considered fractional blob (weight between 0 and 1, exclusive).  See Softness.</summary><remarks><PARA>
The low threshold for 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="soft_thresholding_and_pixel_weighting">soft fixed segmentation</see>.
Pixel values that are less than the low threshold are assigned a blob weight of 0 when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> indicates light blobs.  
Pixel values that are less than the low threshold are assigned a blob weight of 1 when <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> indicates dark blobs.
</PARA><PARA>
The low threshold must be less than the high threshold. 
If a value is supplied such that this requirement is not met, the other threshold
is adjusted.
</PARA></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh"><summary>The percentage of high tail pixels to discard before computing either a hard relative, hard dynamic, or soft relative threshold.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 0 or greater than 100.</para></exception><remarks><PARA>
The percentage of high 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="relative_hard_thresholding">tail pixels</see> 
to discard before computing either a hard relative, hard dynamic, or soft relative threshold.
</PARA><PARA>The sum of the low and high tail value must be less than or equal to 100. If
a tail value is set such that this requirement is not met, the other tail value is adjusted.</PARA><DEFAULT>0%</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_TailHigh--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailHigh" /></li></ul></event><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="multiState"><para>
		
		Fires when both the low and high tail values are changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_BlobSegmentationParams_Tails--><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailLow" /></li><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailHigh" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 0 or greater than 100.</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_TailLow--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailLow" /></li></ul></event><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="multiState"><para>
		
		Fires when both the low and high tail values are changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_BlobSegmentationParams_Tails--><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailLow" /></li><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailHigh" /></li></ul></event><remarks><PARA>
The percentage of low 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="relative_hard_thresholding">tail pixels</see> 
to discard before computing either a hard relative, hard dynamic, or soft relative threshold.
</PARA><PARA>The sum of the low and high tail value must be less than or equal to 100. If
a tail value is set such that this requirement is not met, the other tail value is adjusted.</PARA><DEFAULT>0%</DEFAULT></remarks><summary>The percentage of low tail pixels to discard before computing either a hard relative, hard dynamic, or soft relative threshold.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants" />.</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_Mode--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfMode" /></li></ul></event><summary>The method used to segment an input image into pixels that make up the blob(s) and pixels that are part of the background.</summary><remarks><PARA>
The <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">method</see> used to segment an input image into pixels that make up the blob(s) and pixels that are part of the background.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">HardDynamicThreshold</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetPreMap"><remarks><PARA>
Pixel map that is to be applied to the input image before subtracting the subtraction image.
This property is only used if <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see>.
Each pixel in the input image is used as an index into the supplied map. The input pixel
value is replaced with the value from the map.
</PARA><DEFAULT>The identity map.</DEFAULT></remarks><summary>Pixel map that is to be applied to the InputImage when using subtraction image as the segmentation mode.  Each pixel in the InputImage is used as an index into PreMap.  The input pixel value is replaced with the value from PreMap.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_PostMap--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPostMap" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is NULL, or the supplied
value is not a 1-dimensional SAFEARRY with a lower bound of 0 and an 
upper bound of 255.</para></exception></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetPreMap(System.Byte[])"><param name="value"></param><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_PostMap--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPostMap" /></li></ul></event><summary>Pixel map that is to be applied to the InputImage when using subtraction image as the segmentation mode.  Each pixel in the InputImage is used as an index into PreMap.  The input pixel value is replaced with the value from PreMap.</summary><remarks><PARA>
Pixel map that is to be applied to the input image before subtracting the subtraction image.
This property is only used if <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see>.
Each pixel in the input image is used as an index into the supplied map. The input pixel
value is replaced with the value from the map.
</PARA><DEFAULT>The identity map.</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is NULL, or the supplied
value is not a 1-dimensional SAFEARRY with a lower bound of 0 and an 
upper bound of 255.</para></exception></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetPostMap"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is NULL, or the supplied
value is not a 1-dimensional SAFEARRY with a lower bound of 0 and an 
upper bound of 255.</para></exception><remarks><PARA>
Pixel map that is to be applied to the image that resulted from subtracting the 
subtraction image from the input image.
This property is only used if <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see>.
Each pixel in the subtracted image is used as an index into the supplied map. The input pixel
value is replaced with the value from the map.
</PARA><DEFAULT>A map which sets differences less than 20 equal to 0 and differences greater 
than or equal to 20 equal to 255 (the map assumes that the tool is configured
to use the default <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" /> of 255).</DEFAULT></remarks><summary>Pixel map that is to be applied to the image that resulted from subtracting the SubtractionImage from the InputImage.  The value resulting from the subtraction is used as an index into PostMap and is replaced with the value at that index in PostMap.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_Map--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetMap" /></li></ul></event></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetPostMap(System.Byte[])"><param name="value"></param><summary>Pixel map that is to be applied to the image that resulted from subtracting the SubtractionImage from the InputImage.  The value resulting from the subtraction is used as an index into PostMap and is replaced with the value at that index in PostMap.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_Map--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetMap" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is NULL, or the supplied
value is not a 1-dimensional SAFEARRY with a lower bound of 0 and an 
upper bound of 255.</para></exception><remarks><PARA>
Pixel map that is to be applied to the image that resulted from subtracting the 
subtraction image from the input image.
This property is only used if <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see>.
Each pixel in the subtracted image is used as an index into the supplied map. The input pixel
value is replaced with the value from the map.
</PARA><DEFAULT>A map which sets differences less than 20 equal to 0 and differences greater 
than or equal to 20 equal to 255 (the map assumes that the tool is configured
to use the default <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" /> of 255).</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetMap"><summary>Pixel map that is to be applied to the InputImage when using cogBlobSegmentationModeMap.  Each pixel in the input image is replaced by the value within the pixel map at the index equal to the input image pixel value.</summary><remarks><PARA>
The pixel map used to segment the input image when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">Map</see>.
Each pixel in the input image is replaced by the value within the pixel map at the index equal to the input image pixel value.
</PARA><DEFAULT>Pixel values less than 64 map to 0, pixel values from 
64 through 192 map to 255, and pixel values greater than 192 map 
to 0. (The map assumes that the tool is configured
to use the default <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" /> of 255).</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_PostMap--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPostMap" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is NULL, or the supplied
value is not a 1-dimensional SAFEARRY with a lower bound of 0 and an 
upper bound of 255.</para></exception></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetMap(System.Byte[])"><param name="value"></param><event cref="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobSegmentationParams_PostMap--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPostMap" /></li></ul></event><summary>Pixel map that is to be applied to the InputImage when using cogBlobSegmentationModeMap.  Each pixel in the input image is replaced by the value within the pixel map at the index equal to the input image pixel value.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is NULL, or the supplied
value is not a 1-dimensional SAFEARRY with a lower bound of 0 and an 
upper bound of 255.</para></exception><remarks><PARA>
The pixel map used to segment the input image when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">Map</see>.
Each pixel in the input image is replaced by the value within the pixel map at the index equal to the input image pixel value.
</PARA><DEFAULT>Pixel values less than 64 map to 0, pixel values from 
64 through 192 map to 255, and pixel values greater than 192 map 
to 0. (The map assumes that the tool is configured
to use the default <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" /> of 255).</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationNone(System.Int32)"><param name="scalingValue"><PARA>Pixel value that represents a blob weight of 1.0, all other pixel values are interpreted on a linear scale relative to this value.</PARA></param><summary>Sets the segmentation Mode to cogBlobSegmentationModeNone and sets the ScalingValue property to the value supplied.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="scalingValue" /> is less than or equal to 0 or greater than 255.
</para></exception><remarks><PARA>
Sets the segmentation <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">None</see> 
and sets <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" /> to the value supplied.
</PARA><PARA>
This function suspends event delivery, then sets the public properties
of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> with the supplied values. A single event that includes
all of the affected functional area is typically generated.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationMap(System.Byte[],System.Int32)"><param name="map"><PARA>
	Map used to map the input image to a segmented image. Each pixel in the input image is replaced by the value within the pixel map at the index equal to the input image pixel value.
	</PARA></param><param name="scalingValue"><PARA>Pixel value that represents a blob weight of 1.0, all other pixel values are interpreted on a linear scale relative to this value.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="scalingValue" /> is less than or equal to 0 or greater than 255.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="scalingValue" /> NULL, or 
<paramref name="scalingValue" /> 
is not a 1-dimensional SAFEARRY with a lower bound of 0 and an 
upper bound of 255.</para></exception><remarks><PARA>
Sets the segmentation <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">Map</see> 
and sets
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetMap(System.Byte[])" />

and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" /> to the values supplied.
</PARA><PARA>
This function suspends event delivery, then sets the public properties
of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> with the supplied values. A single event that includes
all of the affected functional area is typically generated.
</PARA></remarks><summary>Sets the segmentation Mode to cogBlobSegmentationModeMap and sets the Map &amp; ScalingValue properties to the values supplied.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationHardFixedThreshold(System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)"><param name="hardFixedThreshold"><PARA>
	If <paramref name="polarity" /> specifies light blobs,
 then pixels values that are greater than 
or equal to this 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="hard_thresholding">hard threshold</see> are part of the blob(s); pixel values that are less than this threshold are part of 
the background.  If <paramref name="polarity" /> specifies 
dark blobs, then the ranges are inverted.
	</PARA></param><param name="polarity"><PARA>
	Specify
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
for dark 
blobs on a light background or 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>
for light blobs on a dark background.
	</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="hardFixedThreshold" /> is less than 0 or greater than 255.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is 
neither 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
nor 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>.</para></exception><summary>Sets the segmentation Mode to cogBlobSegmentationModeHardFixedThreshold and sets the HardFixedThreshold &amp; ScalingValue properties to the values supplied.</summary><remarks><PARA>
Sets the segmentation <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">HardFixedThreshold</see> 
and sets <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardFixedThreshold" /> and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> to the values supplied.
</PARA><PARA>
This function suspends event delivery, then sets the public properties
of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> with the supplied values. A single event that includes
all of the affected functional area is typically generated.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationHardRelativeThreshold(System.Int32,System.Int32,System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)"><param name="tailLow"><PARA>
	The percentage of low tail pixels 
to discard before computing the hard relative threshold.
	</PARA></param><param name="tailHigh"><PARA>
	The percentage of high tail pixels 
to discard before computing the hard relative threshold.
	</PARA></param><param name="hardRelativeThreshold"><PARA>
	A hard 
threshold is computed by determining the pixel value which lies at the supplied percentage of the distance between the low tail pixel value and the high tail pixel value.  This computed threshold is then used to perform Hard-Fixed segmentation.
	</PARA></param><param name="polarity"><PARA>
	Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
for dark 
blobs on a light background or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>
for light blobs on a dark background.
	</PARA></param><summary>Sets the segmentation Mode to cogBlobSegmentationModeHardRelativeThreshold and sets the TailLow, TailHigh, HardRelativeThreshold, &amp; Polarity properties to the values supplied.</summary><remarks><PARA>
Sets the segmentation <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">HardRelativeThreshold </see> 
and sets <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />, <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh" />, 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardRelativeThreshold" /> and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> to the values supplied.
</PARA><PARA>
This function suspends event delivery, then sets the public properties
of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> with the supplied values. A single event that includes
all of the affected functional area is typically generated.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="tailLow" />,
<paramref name="tailHigh" />, or
<paramref name="hardRelativeThreshold" /> is less than 0 or greater than 100.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="tailLow" /> plus
<paramref name="tailHigh" /> is greater than 100.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is 
neither 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
nor 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>.
</para></exception></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationHardDynamicThreshold(System.Int32,System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)"><param name="tailLow"><PARA>
	The percentage of high tail pixels 
to discard before computing the hard relative threshold.
	</PARA></param><param name="tailHigh"><PARA>
	The percentage of high tail pixels 
to discard before computing the hard relative threshold.
	</PARA></param><param name="polarity"><PARA>
	Specify
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
for dark 
blobs on a light background or 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>
for light blobs on a dark background.
	</PARA></param><remarks><PARA>
Sets the segmentation <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">HardDynamicThreshold</see> 
and sets <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />, <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh" /><see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardRelativeThreshold" /> and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> to the values supplied.
</PARA><PARA>
This function suspends event delivery, then sets the public properties
of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> with the supplied values. A single event that includes
all of the affected functional area is typically generated.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="tailLow" /> or
<paramref name="tailHigh" /> is less than 0 or greater than 100.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="tailLow" /> plus
<paramref name="tailHigh" /> is greater than 100.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is 
neither 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
nor 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>.</para></exception><summary>Sets the segmentation Mode to cogBlobSegmentationModeHardDynamicThreshold and sets the TailLow, TailHigh, and Polarity properties to the values supplied.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationSoftFixedThreshold(System.Int32,System.Int32,System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)"><param name="softFixedThresholdLow"><PARA>
	Pixel values that are less than the low threshold are assigned a blob weight of 0 when 
<paramref name="polarity" /> indicates light blobs.  
Pixel values that are less than the low threshold are assigned a blob weight of 1 when <paramref name="polarity" /> indicates dark blobs.
	</PARA></param><param name="softFixedThresholdHigh"><PARA>
When 
<paramref name="polarity" /> indicates light blobs,
pixel values that are greater than the high threshold are assigned a blob
weight equal to 1.
The range of pixel values between the low and high threshold is
divided into <paramref name="softness" /> equally sized ranges.  Pixels with values
in each of these ranges are assigned values between 1 and
<paramref name="softness" />.  A segmentation value of 
<paramref name="softness" />+1 corresponds to a
blob weight of one while all other segmentation values are
interpreted on a linear scale relative to <paramref name="softness" />+1.
</PARA><PARA>
Pixel values that are greater than the high threshold are assigned a blob weight of 0 when 
<paramref name="polarity" /> indicates dark blobs. 
</PARA></param><param name="softness"><PARA>
	The number of intermediate weights separating blobs(1) and background(0).  Pixel values between the low and high threshold are assigned a blob weight between 0.0 and 1.0, exclusive.
	</PARA></param><param name="polarity"><PARA>
	Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
for dark 
blobs on a light background or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>
for light blobs on a dark background.
	</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="SoftFixedTrhesholdLow" /> is less than 0 or greater than 254.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="SoftFixedTrhesholdHigh" /> is less than 1 or greater than 255.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="SoftFixedTrhesholdLow" /> is 
greater than or equal to <paramref name="SoftFixedTrhesholdHigh" />.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="softness" /> is less than 0 or greater than 254.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is 
neither 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
nor 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>.
</para></exception><summary>Sets the segmentation Mode to cogBlobSegmentationModeSoftFixedThreshold and sets the SoftRelativeThresholdLow, SoftRelativeThresholdHigh, Softness, &amp; Polarity properties to the values supplied.</summary><remarks><PARA>
Sets the segmentation <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SoftFixedThreshold </see> 
and sets <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftFixedThresholdLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftFixedThresholdHigh" />,
 and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> to the values supplied.
</PARA><PARA>
This function suspends event delivery, then sets the public properties
of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> with the supplied values. A single event that includes
all of the affected functional area is typically generated.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationSoftRelativeThreshold(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)"><param name="tailLow"><PARA>
	The percentage of high tail pixels 
to discard before computing the threshold.
	</PARA></param><param name="tailHigh"><PARA>
	The percentage of high tail pixels 
to discard before computing the threshold.
	</PARA></param><param name="softRelativeThresholdLow"><PARA>
Soft relative thresholding computes a low soft threshold value by 
determining the pixel value which lies at the supplied percentage 
of the distance between the low tail pixel value and the high tail pixel value.
Pixel values that are less than the computed low threshold are assigned a blob weight of 0 when 
<paramref name="polarity" /> indicates light blobs.  
Pixel values that are less than the computed low threshold are assigned a blob weight of 1 when <paramref name="polarity" /> indicates dark blobs.
</PARA></param><param name="softRelativeThresholdHigh"><PARA>
Soft relative thresholding computes a high soft threshold value by 
determining the pixel value which lies at the specified percentage 
of the distance between the low tail pixel value and the high tail pixel value.
When 
<paramref name="polarity" /> indicates light blobs,
pixel values that are greater than the computed high threshold are assigned a blob
weight equal to 1. 
The range of pixel values between the computed low and high threshold is
divided into <paramref name="softness" /> equally sized ranges.  Pixels with values
in each of these ranges are assigned values between 1 and
<paramref name="softness" />.  A segmentation value of 
<paramref name="softness" />+1 corresponds to a
blob weight of one while all other segmentation values are
interpreted on a linear scale relative to <paramref name="softness" />+1.
</PARA><PARA>
Pixel values that are greater than or equal to the computed high threshold are assigned a blob weight of 0 when 
<paramref name="polarity" /> indicates dark blobs.  
</PARA></param><param name="softness"><PARA>
	The number of intermediate weights separating blobs(1) and background(0).  Pixel values between the low and high threshold are assigned a blob weight between 0.0 and 1.0, exclusive.
	</PARA></param><param name="polarity"><PARA>
	Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
for dark 
blobs on a light background or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>
for light blobs on a dark background.
	</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="tailLow" />,
<paramref name="tailHigh" />, 
<paramref name="softRelativeThresholdLow" />, or
<paramref name="softRelativeThresholdHigh" /> is less than 0 or greater than 100.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="tailLow" /> plus 
<paramref name="tailHigh" /> is greater than 100.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="softRelativeThresholdLow" /> is greater than 
<paramref name="softRelativeThresholdHigh" />.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="softness" /> is less than 0 or greater than 254.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is 
neither 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">DarkBlobs</see>
nor 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">LightBlobs</see>.
</para></exception><summary>Sets the segmentation Mode to cogBlobSegmentationModeSoftRelativeThreshold and sets the TailLow, TailHigh, SoftRelativeThresholdLow, SoftRelativeThresholdHigh, Softness, &amp; Polarity properties to the values supplied.</summary><remarks><PARA>
Sets the segmentation <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SoftRelativeThreshold </see> 
and sets <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftRelativeThresholdLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftRelativeThresholdHigh" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />,
 and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" /> to the values supplied.
</PARA><PARA>
This function suspends event delivery, then sets the public properties
of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> with the supplied values. A single event that includes
all of the affected functional area is typically generated.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationSubtractionImage(System.Byte[],Cognex.VisionPro.CogImage8Grey,System.Byte[],System.Int32,System.Int32,System.Int32)"><param name="preMap"><PARA>
	Pixel map that is to be applied to the input image before subtracting the subtraction image.
Each pixel in the input image is used as an index into the supplied map. The input pixel
value is replaced with the value from the map.
	</PARA></param><param name="subtractionImage"><PARA>The subtraction image. The pixels in this image are subtracted from those in 
	the input image to produce the segmented image.</PARA></param><param name="postMap"><PARA>
	Pixel map that is to be applied to the image that resulted from subtracting the 
subtraction image from the input image.
Each pixel in the subtracted image is used as an index into the supplied map. The input pixel
value is replaced with the value from the map.
	</PARA></param><param name="scalingValue"><PARA>Pixel value that represents a blob weight of 1.0, all other pixel values are interpreted on a linear scale relative to this value.</PARA></param><param name="subtractionImageOffsetX"><PARA>
	The X offset value in pixels of the <paramref name="subtractionImage" />. 
The X and Y offset values measure the offset from the upper-left corner of the 
run-time input image to the upper-left corner of the 
<paramref name="subtractionImage" /> in image coordinates of the input image.
	</PARA></param><param name="subtractionImageOffsetY"><PARA>
		The Y offset value in pixels of the <paramref name="subtractionImage" />. 
The X and Y offset values measure the offset from the upper-left corner of the 
run-time input image to the upper-left corner of the 
<paramref name="subtractionImage" /> in image coordinates of the input image.
	</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="scalingValue" /> is less than 0 or greater than 255.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="preMap" /> or 
<paramref name="postMap" /> is NULL or the is not a 1-dimensional SAFEARRY with a lower bound of 0 and an 
upper bound of 255.
</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="subtractionImage" /> is NULL or unallocated.
</para></exception><remarks><PARA>
Sets the segmentation <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see> 
and sets <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />,
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetPreMap(System.Byte[])" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />,
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetPostMap(System.Byte[])" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetX" />,
 and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetY" /> to the values supplied.
</PARA><PARA>
This function suspends event delivery, then sets the public properties
of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> with the supplied values. A single event that includes
all of the affected functional area is typically generated.
</PARA></remarks><summary>Sets the segmentation Mode to cogBlobSegmentationModeSubtractionImage and sets the PreMap, SubtractionImage, PostMap, ScalingValue, SubtractionImageOffsetX, &amp; SubtractionImageOffsetY properties to the values supplied.</summary></member><member name="E:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobScene.#ctor(Cognex.VisionPro.Blob.CogBlobScene)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobScene.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobScene.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobScene.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobResult"><remarks><PARA>Interface to a single blob result. Provides information for an individual feature found during blob analysis. Features include both blobs and holes within blobs.</PARA></remarks><summary>Class for a single blob result.  Provides information for an individual feature found during blob analysis.  Features include both blobs and holes within blobs.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.#ctor(Cognex.VisionPro.Blob.CogBlobResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.NotClipped"><remarks><PARA>This measure will be 1.0 if the blob was not clipped during processing.  It will be zero if the blob touches the edge of the region of interest, or the edge of the run-time image, or any Don't Care pixel in the <see cref="P:Cognex.VisionPro.Blob.CogBlob.InputImageMask" />. </PARA></remarks><summary>This measure will be one if the blob was not clipped during processing.  It will be zero if the blob touches the edge of the Region, or the edge of the InputImage, or any Don't Care pixel in the InputImageMask.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.AcircularityRms"><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException" cgnxHRESULT="E_CogBlob_InvalidMeasure"><para>
The connectivity mode is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">WholeImageGreyScale</see>.
</para></exception><remarks><PARA>The acircularity of this blob as defined by the normalized RMS deviation of the boundary point radius values from r0, where r0 is the square root of the blob's area divided by π.  This measure is not available when using whole-image connectivity.</PARA></remarks><summary>The acircularity of this blob as defined by the normalized RMS deviation of the boundary point radius values from r0, where r0 is the square root of the blob's area divided by PI.  This measure is not available when using whole-image connectivity.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.Acircularity"><summary>The acircularity of this blob as defined by the formula: Perimeter Squared / (4 x PI x Area).  This measure is not available when using whole-image connectivity.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException" cgnxHRESULT="E_CogBlob_InvalidMeasure"><para>
The connectivity mode is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">WholeImageGreyScale</see>.
</para></exception><remarks><PARA>
	The acircularity of this blob as defined by the formula: perimeter^2 / (4 x π x Area).  This measure is not available when using whole-image connectivity.</PARA></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.Angle"><summary>The angle (in radians) of the principal axis of the blob,  specified relative to the input image's selected space at run-time.</summary><remarks><PARA>The angle of the principal axis of the blob, specified in units of the input image's selected space at run-time.</PARA></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.Elongation"><summary>The ratio of InertiaMax to InertiaMin.</summary><remarks><PARA>The ratio of <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMax" /> to <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMin" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMax"><remarks><PARA>The blob's <see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="second_moments_of_inertia_about_the_principal_axe">second moment of inertia</see> about the second principal axis of the blob.</PARA></remarks><summary>The blob's second moment of inertia about the second principal axis of the blob.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMin"><remarks><PARA>The blob's 
	<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="second_moments_of_inertia_about_the_principal_axe">second moment of inertia</see>
 about the principal axis of the blob.</PARA></remarks><summary>The blob's second moment of inertia about the principal axis of the blob.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaY"><remarks><PARA>
The 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="second_moments_of_inertia_about_the_principal_axe">second moment of inertia</see> 
of the blob about an axis drawn through the blob's center of mass and 
parallel to the X-axis of selected space of the input image.
</PARA></remarks><summary>The second moment of inertia of the blob about an axis drawn through the blob's center of mass and parallel to the x axis of selected space of the input image.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaX"><remarks><PARA>
The 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="second_moments_of_inertia_about_the_principal_axe">second moment of inertia</see> 
of the blob about an axis drawn through the blob's center of mass and 
parallel to the Y-axis of selected space of the input image.
</PARA></remarks><summary>The second moment of inertia of the blob about an axis drawn through the blob's center of mass and parallel to the y axis of selected space of the input image.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.CenterOfMassY"><remarks><PARA>The y-coordinate of the center of mass of the blob specified in units of the input image's selected space at run-time.</PARA></remarks><summary>The y-coordinate of the center of mass of the blob specified in units of the input image's selected space at run-time.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.CenterOfMassX"><summary>The x-coordinate of the center of mass of the blob specified in units of the input image's selected space at run-time.</summary><remarks><PARA>The x-coordinate of the center of mass of the blob specified in units of the input image's selected space at run-time.</PARA></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.Perimeter"><remarks><PARA>
The perimeter of the blob specified in units of the input image's selected space at run-time.  Formula corrects for the tendency of the pixel aligned boundary of the blob to overstate the true blob perimeter.  Not available for whole-image connectivity.
</PARA></remarks><summary>The perimeter of the blob specified in units of the input image's selected space at run-time.  Formula corrects for the tendency of the pixel aligned boundary of the blob to overstate the true blob perimeter.  Not available for whole-image connectivity.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException" cgnxHRESULT="E_CogBlob_InvalidMeasure"><para>
The connectivity mode is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">WholeImageGreyScale</see>.
</para></exception></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.Area"><remarks><PARA>
The area of the blob specified in units of the input image's selected space at run-time.  The area measure takes into account the blob weight of each pixel. Weighting is
accomplished by assigning values between 0 and 255 to each pixel, then normalizing
the total of the values of the pixels that make up the blob using the 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" />.
</PARA></remarks><summary>The area of the blob specified in units of the input image's selected space at run-time.  The area measure, as do many other blob measures, takes into account the blob weight [0,1] of each pixel.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.SelectedSpaceName"><remarks><PARA>Returns the name of the selected space of the input image at run-time.  All relevant blob measures are specified in units of the selected space.</PARA></remarks><summary>Returns the name of the selected space of the input image at run-time.  All relevant blob measures are specified in units of the selected space.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.Label"><remarks><PARA>
The connectivity label.  For grey scale connectivity, the label will be 1 for blobs and 0 for holes.  For labeled connectivity, this is the blob's label.
</PARA></remarks><summary>The connectivity label.  For grey scale connectivity, the label will be cogBlobLabelBlob(1) for blobs and cogBlobLabelHole(0) for holes.  For labeled connectivity, this is the blob's label.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.NumUnfilteredChildren"><remarks><PARA>The number of children of this blob before any filter criteria are applied.</PARA></remarks><summary>The number of children of this blob before any filter criteria are applied.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.NumChildren"><summary>The number of children of this blob after all filter criteria are applied.</summary><remarks><PARA>The number of children of this blob after all filter criteria are applied.</PARA></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.FilteredOut"><summary>True if this blob was filtered out based on any of filter criteria specified in the RunTimeMeasures.  False, otherwise.</summary><remarks><PARA>True if this blob was filtered out based on any of filter criteria specified in the <see cref="P:Cognex.VisionPro.Blob.CogBlob.RunTimeMeasures" />.  False, otherwise.</PARA></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobResult.ID"><summary>A unique ID used to identify this blob within the context of the CogBlobResults that this blob belongs.</summary><remarks><PARA>A unique ID used to identify this blob within the context of the 
	<see cref="T:Cognex.VisionPro.Blob.CogBlobResults" /> object that contains this result.</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianX(Cognex.VisionPro.Blob.CogBlobAxisConstants)"><param name="axis"><PARA>A value defined in <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants" /> which
	determines the axis to which the median is aligned.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="axis" /> is not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants" /> or
it is <BOLD>PixelAlignedNoExclude</BOLD>.
</para></exception><remarks><PARA>The x-coordinate of the point through which two orthogonal lines each divide the blob's area in half.  The orthogonal lines are aligned with the <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">Axis</see> specified.  MedianX is specified in units of the input image's selected space.</PARA><PARA>
This measure <ITALIC>always</ITALIC> makes use of the current 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" />; you cannot
specify <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">PixelAlignedNoExclude</see> 
for <paramref name="axis" />.
</PARA><PARA>
Note that this measure is only cached for the most recently requested axis; if you request this measure for a different axis, it is recomputed.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">Principal</see></DEFAULT></remarks><summary>The x-coordinate of the point through which two orthogonal lines each divide the blob's area in half.  The orthogonal lines are aligned with the Axis specified.  MedianX is specified in units of the input image's selected space.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianY(Cognex.VisionPro.Blob.CogBlobAxisConstants)"><param name="axis"><PARA>A value defined in <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants" /> which
	determines the axis to which the median is aligned.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="axis" /> is not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants" /> or
it is <BLOB>PixelAlignedNoExclude</BLOB>.
</para></exception><summary>The y-coordinate of the point through which two orthogonal lines each divide the blob's area in half.  The orthogonal lines are aligned with the Axis specified.  MedianY is specified in units of the input image's selected space.</summary><remarks><PARA>The y-coordinate of the point through which two orthogonal lines each divide the blob's area in half.  The orthogonal lines are aligned with the <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">Axis</see> specified.  MedianY is specified in units of the input image's selected space.</PARA><PARA>
This measure <ITALIC>always</ITALIC> makes use of the current 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" />; you cannot
specify <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">PixelAlignedNoExclude</see> 
for <paramref name="axis" />.
</PARA><PARA>
Note that this measure is only cached for the most recently requested axis; if you request this measure for a different axis, it is recomputed.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">Principal</see></DEFAULT></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetMeasure(Cognex.VisionPro.Blob.CogBlobMeasureConstants)"><param name="measure"><PARA>The <see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">measure</see> to return.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="measure" /> is not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants" />.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException" cgnxHRESULT="E_CogBlob_InvalidMeasure"><para>
The connectivity mode is <see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">WholeImageGreyScale</see> 
and 
<paramref name="measure" /> is one of the following: 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">BoundaryPixelLength</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Acircularity</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">AcircularityRms</see>, or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Perimeter</see>.
</para></exception><summary>Returns the value of the blob measure requested.</summary><remarks><PARA>Returns the value of the blob <see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants" /> requested.</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBox(Cognex.VisionPro.Blob.CogBlobAxisConstants)"><param name="axis"><PARA>The <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">axis</see> to which to align the bounding box.</PARA></param><returns><PARA>The returned bounding box: an <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="axis" /> is not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants" />.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobEntireBlobExcludedException" cgnxHRESULT="E_CogBlob_EntireBlobExcluded"><para>
The entire blob has been excluded because you specified an extrema exclusion setting 
greater than or equal to the area of the blob.
</para></exception><summary>Gets a bounding box of the blob that is aligned with the specified axis.  The exclude extrema properties of the run parameters are used when calculating the bounding box, except when Axis is set to cogBlobAxisPixelAlignedNoExclude.</summary><remarks><PARA>
Gets a bounding box of the blob that is aligned with the specified axis.  The run-time <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" /> settings are used when calculating the bounding box, except when <paramref name="axis" /> is set to <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">PixelAlignedNoExclude</see>.
</PARA><PARA>
The returned bounding box is in the selected space of the 
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />.
</PARA><NOTE>
If you specify <see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">PixelAlignedNoExclude</see> for
<paramref name="axis" />, the tool ignores the extrema exclusion settings and returns a graphic that is
in the pixel space of the input image. This option requires less time than the other options to execute.
</NOTE></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBoxAtAngle(System.Double)"><param name="angle"><PARA>The angle, specified in the selected space of the input image.</PARA></param><summary>Gets a bounding box of the blob that is aligned with the angle (in radians) specified.  The exclude extrema properties of the run parameters are used when calculating the bounding box.</summary><remarks><PARA>Gets a bounding box of the blob that is aligned with the specified angle.  The exclude extrema properties of the run parameters are used when calculating the bounding box.</PARA></remarks><returns><PARA>The returned bounding box: an <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></returns></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundary"><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException" cgnxHRESULT="E_CogBlob_InvalidMeasure"><para>
The connectivity mode is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">WholeImageGreyScale</see>.
</para></exception><summary>Creates a closed polygon representing the boundary of the blob which completely encloses all pixels that are part of this blob, regardless of the blob weight associated with each pixel.  The boundary always falls directly between the edges of pixels.</summary><returns><PARA>
	The returned boundary: an <see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></returns><remarks><PARA>Creates a closed polygon representing the boundary of the blob which completely encloses all pixels that are part of this blob, regardless of the blob weight associated with each pixel.  The boundary always falls directly between the edges of pixels.</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobResult.CreateResultGraphics(Cognex.VisionPro.Blob.CogBlobResultGraphicConstants)"><param name="graphicOptions"><PARA>A value created by ORing together one or more values 
	from <see cref="T:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants" />.</PARA></param><summary>Creates a composite result graphic containing child graphics specified by the GraphicOptions which is a bitwise combination of CogBlobResultGraphicConstants.</summary><returns><PARA>The returned graphics: an <see cref="T:Cognex.VisionPro.CogCompositeShape" /></PARA></returns><remarks><PARA>
Creates a <see cref="T:Cognex.VisionPro.CogCompositeShape" /> 
result graphic containing child graphics specified by 
<paramref name="graphicOptions" />, a bitwise combination of 
values defined in <see cref="T:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants" />.
</PARA><PARA>
The <see cref="P:Cognex.VisionPro.CogCompositeShape.ID" /> property
of the returned graphic is set to the <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" /> of this blob.
</PARA><PARA>
The returned graphic and it's children have their 
<see cref="P:Cognex.VisionPro.CogCompositeShape.Interactive" /> property 
set to True.
</PARA><PARA>
The graphic's color is set to green for members of the filtered results, red for
blobs that were filtered out.
</PARA></remarks></member><member name="T:Cognex.VisionPro.Blob.CogBlobResultCollection"><remarks><PARA>The interface to a collection of blob <see cref="T:Cognex.VisionPro.Blob.CogBlobResult" />.</PARA></remarks><summary>A collection of blob results.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.#ctor(Cognex.VisionPro.Blob.CogBlobResultCollection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResultCollection.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResultCollection.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResultCollection.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobResultCollection.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.IndexOf(Cognex.VisionPro.Blob.CogBlobResult)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobResults"><summary>Class which provides access to all of the results of a blob analysis.  Includes access to filtered and unfiltered collections of CogBlobResult objects.  Also provides access to intermediate and result images of the blob analysis.</summary><remarks><PARA>The blob results interface. This interface provides information about the
	overall results of blob analysis; use <see cref="T:Cognex.VisionPro.Blob.CogBlobResult" /> for information 
	about individual blobs.</PARA></remarks><example><code lang="C#">
        CogBlobResultCollection mBlobResults;

        mBlobResults = mCogBlobTool.Results.GetBlobs();

        Console.WriteLine("Number of Blobs: {0}", mBlobResults.Count);

        // Print information for each blob found
        foreach (CogBlobResult blobResult in mBlobResults)
        {
          Console.WriteLine("ID: {0}, CenterX: {1}, CenterY: {2}, Area: {3}",
          blobResult.ID, blobResult.CenterOfMassX, blobResult.CenterOfMassY, blobResult.Area);
        }
      </code><code lang="Visual Basic">
        Dim myBlobResults As CogBlobResultCollection

        myBlobResults = myCogBlobTool.Results.GetBlobs()

        Console.WriteLine("Number of Blobs: {0}", myBlobResults.Count)

        ' Print information for each blob found
        For Each blobResult As CogBlobResult In myBlobResults
          Console.WriteLine("ID: {0}, CenterX: {1}, CenterY: {2}, Area: {3}", _
          blobResult.ID, blobResult.CenterOfMassX, blobResult.CenterOfMassY, blobResult.Area)
        Next
      </code></example></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.#ctor(Cognex.VisionPro.Blob.CogBlobResults)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetBlobs"><summary>Gets all of the blobs from the blob analysis after filtering and sorting have been applied.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetBlobs(System.Boolean)"><param name="filtered"><PARA>If true, the blobs are filtered and sorted according to the defined
	<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects. If false, blobs are not 
	filtered and sorted.</PARA></param><summary>Gets all of the blobs from the blob analysis.  The Filtered argument indicates to get the blobs after filtering and sorting have been applied, or blobs without any filtering and sorting applied.</summary><remarks><PARA>
Returns a <see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" /> containing all of the individual
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" /> objects produced in the tool run that produced this object. You 
use the <paramref name="Filter" /> argument to control whether or not filtered blobs are included.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetTopLevelBlobs(System.Boolean)"><param name="filtered"><PARA>If true, the blobs are filtered according to the defined
	<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects. If false, blobs are not 
	filtered.</PARA></param><summary>Gets all of the top level blobs, which are the blobs that do not have an enclosing parent blob.  The Filtered argument indicates to get the blobs after filtering and sorting have been applied, or blobs without any filtering and sorting applied.</summary><remarks><PARA>
Returns a <see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" /> containing a 
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" /> object for each top-level blob produced in the tool run that produced this object. (A top-level blob is one that is not contained within another feature.  You 
use the <paramref name="Filter" /> argument to control whether or not filtered blobs are included.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetChildren(System.Int32,System.Boolean)"><param name="blobID"><PARA>
	The <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" /> of the blob the children of which are returned.
	</PARA></param><param name="filtered"><PARA>If true, the blobs are filtered according to the defined
	<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects. If false, blobs are not 
	filtered.</PARA></param><returns><PARA>The returned <see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" />.</PARA></returns><remarks><PARA>
Returns a <see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" /> containing a 
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" /> object for each child blob contained within the blob whose
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" /> you supply. You 
use the <paramref name="Filter" /> argument to control whether or not filtered blobs are included.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="blobID" /> is less than 1 or 
	greater than the number of unfiltered blobs in this <see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />.</para></exception><summary>Get either a filtered or unfiltered collection of children of the blob specified by ID.  The filtered blobs will also be sorted if sorting was enabled.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetSiblings(System.Int32,System.Boolean)"><param name="blobID"><PARA>
	The <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" /> of the blob the siblings of which are returned.
	</PARA></param><param name="filtered"><PARA>If true, the blobs are filtered according to the defined
	<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects. If false, blobs are not 
	filtered.</PARA></param><summary>Get either a filtered or unfiltered collection of the siblings of the blob specified by ID.  The filtered blobs will also be sorted if sorting was enabled.</summary><returns><PARA>The returned <see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" />.</PARA></returns><remarks><PARA>Get the siblings of the blob specified by 
	the supplied <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />. A blob's siblings are all of
	the features that have the same parent as the blob. The returned collection 
	includes both the blob you supply and all of its siblings.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="blobID" /> is less than 1 or 
	greater than the number of unfiltered blobs in this <see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />.</para></exception></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetParent(System.Int32)"><param name="blobID"><PARA>
	The <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" /> of the blob the parent of which is returned.
	</PARA></param><summary>Get the parent of the blob specified by ID.  Returns Nothing for top level blobs which do not have parents.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="blobID" /> is less than 1 or 
	greater than the number of unfiltered blobs in this <see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />.</para></exception><remarks><PARA>Get the parent of the blob specified by the supplied 
	<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />.</PARA></remarks><returns><PARA>The returned <see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" />.</PARA></returns></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetBlobByID(System.Int32)"><param name="blobID"><PARA>
	The <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" /> of the blob to return.
	</PARA></param><returns><PARA>The returned <see cref="T:Cognex.VisionPro.Blob.CogBlobResult" />.</PARA></returns><summary>Given a blob ID, return its blob result.</summary><remarks><PARA>Given a blob <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />, return a
	<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" /> describing the blob's properties.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="blobID" /> is less than 1 or 
	greater than the number of unfiltered blobs in this <see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />.</para></exception></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage"><remarks><PARA>
Gets an <see cref="T:Cognex.VisionPro.CogImage8Grey" /> containing the segmented
image. 
</PARA><PARA>You must set
	<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage" />,
	<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking" />, or
	<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology" />
to True or <see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" /> will return Nothing for the corresponding image.
</PARA></remarks><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogImage8Grey" />.</PARA></returns><summary>Gets the specified segmented image.  The image will be stretched for maximum viewing contrast.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="WhichImage" /> is not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants" />.</para></exception></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)"><param name="whichImage"><PARA>Which image to obtain. Specify a value from <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants" />.</PARA></param><param name="stretchIt"><PARA>If True, the image is adjusted for maximum contrast; if False, the actual
	segmented image is returned.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="whichImage" /> is not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants" />.</para></exception><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogImage8Grey" />.</PARA></returns><summary>Gets the specified segmented image.  The image will be stretched for maximum viewing contrast if StretchIt is true, otherwise, the image will contain the actual segmented image data.</summary><remarks><PARA>
Gets an <see cref="T:Cognex.VisionPro.CogImage8Grey" /> containing the segmented
image. 
</PARA><PARA>You must set
	<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage" />,
	<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking" />, or
	<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology" />
to True or <see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" /> will return Nothing for the corresponding image.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.CreateBlobImage"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Background" /> is less than 0 or greater than 255 (only if
	<paramref name="Viewable" /> is True).</para></exception><summary>Create an image of the blobs &amp; holes in this collection.  Blobs &amp; holes are painted for maximum viewable contrast.</summary><remarks><PARA>
Create an image of the blobs and holes in this collection.  Blobs and holes will be painted 
using their segmentation values in an image pre-filled with a supplied
background color. You can also specify that a viewable image (one that 
maximizes contrast between features) be created.
</PARA></remarks><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogImage8Grey" />.</PARA></returns></member><member name="M:Cognex.VisionPro.Blob.CogBlobResults.CreateBlobImage(System.Boolean,System.Boolean,System.Int32)"><param name="filtered"><PARA>If true, the blobs placed in the image are filtered according to the defined
	<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects. If false, blobs are not 
	filtered.</PARA></param><param name="viewable"><PARA>
	If False, then the image background pixels are set to <paramref name="background" />,
	and feature pixels are set to their segmentation values (between 1 and 
	<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" /> + 1 for soft threshold grey 
	scale connectivity, the feature label for labeled connectivity).
	</PARA><PARA>
If True, then the image background pixels are set to 128, hole pixels are set to 0, and feature pixels are set to values from 192 through 255. If hard thresholding is used, then feature pixels are set to 255. If soft thresholding is used, the segmentation values are mapped to a range of values from 255 through 192, with a maximum step of 10 pixel values between segmentation values. For example, if <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" /> is set to 3, then object pixels will be displayed using pixel values of 255, 245, 235, and 225.
</PARA><PARA>
If labeled blob analysis is being used, blobs have their label values mapped to a range of values between 96 and 255. The values are evenly distributed across the range. For example, if the minimum label value is 1 and the maximum label value is 3, then the blobs would be displayed using pixel values of 96, 175, and 255.
</PARA></param><param name="background"><PARA>The pixel value to use for the image background. If <paramref name="viewable" />
	is True, then this parameter is ignored.</PARA></param><remarks><PARA>
Create an image of the blobs and holes in this collection.  Blobs and holes will be painted 
using their segmentation values in an image pre-filled with a supplied
background color. You can also specify that a viewable image (one that 
maximizes contrast between features) be created.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="background" /> is less than 0 or greater than 255 (only if
	<paramref name="viewable" /> is True).</para></exception><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogImage8Grey" />.</PARA></returns><summary>Create an image of the blobs &amp; holes in this collection.  Blobs &amp; holes will be painted using their segmentation values in an image pre-filled with Background.  If Viewable, Background is ignored, blobs &amp; holes are painted for maximum viewable contrast.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlob"><summary>Class for configuring and performing blob analysis.  The blob run-time parameters include, but are not limited to, settings for segmentation, connectivity, morphology, masking, filtering, and sorting.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlob.#ctor(Cognex.VisionPro.Blob.CogBlob)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlob.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfSegmentationParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SegmentationParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConnectivityMode may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityCleanup"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConnectivityCleanup may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityMinPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConnectivityMinPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExtremaExcludeMode may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExtremaExcludeArea may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeAreaPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExtremaExcludeAreaPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeAreaPercent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExtremaExcludeAreaPercent may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaAngle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExtremaAngle may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfMorphologyOperations"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MorphologyOperations may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfRunTimeMeasures"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunTimeMeasures may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SaveSegmentedImage may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImageBeforeMasking"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SaveSegmentedImageBeforeMasking may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImageBeforeMorphology"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SaveSegmentedImageBeforeMorphology may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMask"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageMask may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMaskOffsetX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageMaskOffsetX may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMaskOffsetY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageMaskOffsetY may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfSortEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SortEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfSortMeasure"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SortMeasure may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlob.SfSortAscending"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SortAscending may have changed.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlob.SortAscending"><remarks><PARA>A value of True will sort the blobs in ascending order.  <see cref="P:Cognex.VisionPro.Blob.CogBlob.SortAscending" /> is only used if <see cref="P:Cognex.VisionPro.Blob.CogBlob.SortEnabled" /> is true.</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_SortAscending--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSortAscending" /></li></ul></event><summary>A value of True will sort the blobs in ascending order.  SortAscending is only used if SortEnabled is true.</summary><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim smallestPerimeter As Double
    Dim largestPerimeter As Double

    myBlob.SortEnabled = True
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter
    myBlob.SortAscending = False
    myBlobResults = myBlob.Execute(mobjImage, r)

    TextBox1.Text = myBlobResults.GetBlobs.Count

    largestPerimeter = myBlobResults.GetBlobs.Item(0).Perimeter
    smallestPerimeter = myBlobResults.GetBlobs.Item(myBlobResults.GetBlobs.Count - 1).Perimeter

    MsgBox("Largest Perimeter: " + largestPerimeter + vbCr + " Smallest Perimeter: " + smallestPerimeter)
  End Sub
    </code><code lang="C#">
     using Cognex.VisionPro; 
     using Cognex.VisionPro.Blob;

      private void doBlob()
    {
    CogBlob myBlob=new CogBlob();  
    CogBlobResults myBlobResults; 
    double smallestPerimeter; 
    double largestPerimeter; 
    myBlob.SortEnabled = true;
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter;
    myBlob.SortAscending = false;
    myBlobResults = myBlob.Execute(mobjImage, r);
    textBox1.Text = myBlobResults.GetBlobs().Count.ToString();
    largestPerimeter = myBlobResults.GetBlobs()[0].Perimeter;
    smallestPerimeter = myBlobResults.GetBlobs()[myBlobResults.GetBlobs().Count - 1].Perimeter;
    MessageBox.Show ("Largest Perimeter: " + largestPerimeter + "  Smallest Perimeter: " + smallestPerimeter);
    }
     </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.SortMeasure"><summary>The blob measure that will be used for sorting the filtered collection of blobs.  SortMeasure is only used if SortEnabled is true.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_SortMeasure--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSortMeasure" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is not a member of 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants" /></para></exception><remarks><PARA>
The <see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">blob measure</see> that will be used for sorting the filtered collection of blobs. <see cref="P:Cognex.VisionPro.Blob.CogBlob.SortMeasure" /> is only used if <see cref="P:Cognex.VisionPro.Blob.CogBlob.SortEnabled" /> is true.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Area</see></DEFAULT></remarks><example><code lang="Visual Basic">
   Imports Cognex.VisionPro
   Imports Cognex.VisionPro.Blob
   
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim smallestPerimeter As Double
    Dim largestPerimeter As Double

    myBlob.SortEnabled = True
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter
    myBlob.SortAscending = False
    myBlobResults = myBlob.Execute(mobjImage, r)

    TextBox1.Text = myBlobResults.GetBlobs.Count

    largestPerimeter = myBlobResults.GetBlobs.Item(0).Perimeter
    smallestPerimeter = myBlobResults.GetBlobs.Item(myBlobResults.GetBlobs.Count - 1).Perimeter

    MsgBox("Largest Perimeter: " + largestPerimeter + vbCr + " Smallest Perimeter: " + smallestPerimeter)
  End Sub
    </code><code lang="C#">
     using Cognex.VisionPro; 
     using Cognex.VisionPro.Blob;
     
      private void doBlob()
    {
    CogBlob myBlob=new CogBlob();  
    CogBlobResults myBlobResults; 
    double smallestPerimeter; 
    double largestPerimeter; 
    myBlob.SortEnabled = true;
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter;
    myBlob.SortAscending = false;
    myBlobResults = myBlob.Execute(mobjImage, r);
    textBox1.Text = myBlobResults.GetBlobs().Count.ToString();
    largestPerimeter = myBlobResults.GetBlobs()[0].Perimeter;
    smallestPerimeter = myBlobResults.GetBlobs()[myBlobResults.GetBlobs().Count - 1].Perimeter;
    MessageBox.Show ("Largest Perimeter: " + largestPerimeter + "  Smallest Perimeter: " + smallestPerimeter);
    }
     </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.SortEnabled"><remarks><PARA>
Enables the sorting of the filtered collection of blobs.  The 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SortMeasure" /> and 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SortAscending" /> properties indicate how the blobs will be sorted.
</PARA><DEFAULT>True</DEFAULT></remarks><summary>Enables the sorting of the filtered collection of blobs.  The SortMeasure and SortAscending properties indicate how the blobs will be sorted.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_SortEnabled--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSortEnabled" /></li></ul></event><example><code lang="Visual Basic">
   Imports Cognex.VisionPro
   Imports Cognex.VisionPro.Blob
   
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim smallestPerimeter As Double
    Dim largestPerimeter As Double

    myBlob.SortEnabled = True
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter
    myBlob.SortAscending = False
    myBlobResults = myBlob.Execute(mobjImage, r)

    TextBox1.Text = myBlobResults.GetBlobs.Count

    largestPerimeter = myBlobResults.GetBlobs.Item(0).Perimeter
    smallestPerimeter = myBlobResults.GetBlobs.Item(myBlobResults.GetBlobs.Count - 1).Perimeter

    MsgBox("Largest Perimeter: " + largestPerimeter + vbCr + " Smallest Perimeter: " + smallestPerimeter)
  End Sub
    </code><code lang="C#">
     using Cognex.VisionPro; 
     using Cognex.VisionPro.Blob;
     
      private void doBlob()
    {
    CogBlob myBlob=new CogBlob();  
    CogBlobResults myBlobResults; 
    double smallestPerimeter; 
    double largestPerimeter; 
    myBlob.SortEnabled = true;
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter;
    myBlob.SortAscending = false;
    myBlobResults = myBlob.Execute(mobjImage, r);
    textBox1.Text = myBlobResults.GetBlobs().Count.ToString();
    largestPerimeter = myBlobResults.GetBlobs()[0].Perimeter;
    smallestPerimeter = myBlobResults.GetBlobs()[myBlobResults.GetBlobs().Count - 1].Perimeter;
    MessageBox.Show ("Largest Perimeter: " + largestPerimeter + "  Smallest Perimeter: " + smallestPerimeter);
    }
     </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.RegionMode"><summary>Specifies whether blob analysis will be performed strictly within the confines of the region specified or whether blob analysis will be performed within the image aligned bounding box of the region.</summary><remarks><PARA>Specifies whether blob analysis will be performed strictly within the confines of the region specified or whether blob analysis will be performed within the image aligned bounding box of the region.</PARA><PARA>
This property may only be set to one of the following values:
<see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see> or 
<see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
</PARA><PARA>
If no Region argument is supplied to
the <see cref="M:Cognex.VisionPro.Blob.CogBlob.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)" /> function, then this property is ignored.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
This property is set to a value other than those specified above.
</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_RegionMode--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfRegionMode" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlob.InputImageMaskOffsetY"><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_InputImageMaskOffsetY--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMaskOffsetY" /></li></ul></event><summary>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in image coordinates of the InputImage.</summary><remarks><PARA>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in image coordinates of the InputImage.</PARA><DEFAULT>0.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlob.InputImageMaskOffsetX"><summary>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in image coordinates of the InputImage.</summary><remarks><PARA>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in image coordinates of the InputImage.</PARA><DEFAULT>0.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_InputImageMaskOffsetX--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMaskOffsetX" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlob.InputImageMask"><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_InputImageMask--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMask" /></li></ul></event><remarks><PARA>
A mask <see cref="T:Cognex.VisionPro.CogImage8Grey" />
indicating areas of "Care" and "Don't Care". 
Pixels with nonzero values are interpreted as "Care" pixels: image pixels that
correspond to "Care" pixels in the mask are treated normally. 
Pixels with zero values are interpreted as "Don't Care" pixels: image pixels that
correspond to "Don't Care" pixels in the mask are always treated
as background pixels (or assigned a label of 0 if you are using labeled
connectivity).
</PARA><PARA>
The mask is aligned to the input image using the 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.InputImageMaskOffsetX" /> and
<see cref="P:Cognex.VisionPro.Blob.CogBlob.InputImageMaskOffsetY" /> functions.
</PARA><DEFAULT>A NULL image.</DEFAULT></remarks><summary>Mask indicating areas of Care (Non-Zero Mask Pixels) and Don't Care (Zero).  Don't Care areas are treated as background/holes when performing grey scale connectivity.  The mask is aligned to the InputImage using the InputImageMaskOffsetX &amp; Y values.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology"><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_SaveSegmentedImageBeforeMorphology--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImageBeforeMorphology" /></li></ul></event><remarks><PARA>Save the segmented image, after masking but before morphology, as part of the blob results.  Otherwise, the image will be released once blob analysis has completed and the <see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" /> method will return Nothing when requesting this image.</PARA></remarks><summary>Save the segmented image, after masking but before morphology, as part of the blob results.  Otherwise, the image will be released once blob analysis has completed and the CreateSegmentedImage method will return Nothing when requesting this image.</summary><example><code lang="Visual Basic">
   Imports Cognex.VisionPro
   Imports Cognex.VisionPro.Blob
   
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim myImage As CogImage8Grey
    myBlob.SaveSegmentedImageBeforeMorphology = True
    myBlobResults = myBlob.Execute(mobjImage, r)
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMorphology, True)
    cdDisp.Image = myImage
    End Sub
    </code><code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
       private void doBlob()
    {
      CogBlob myBlob=new CogBlob();
      CogBlobResults myBlobResults;
      CogImage8Grey myImage; 
      myBlob.SaveSegmentedImageBeforeMorphology = true;
      myBlobResults = myBlob.Execute(mobjImage,r);
      myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMorphology, true);
      cdDisp.Image = myImage;
     }
   </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking"><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_SaveSegmentedImageBeforeMasking--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImageBeforeMasking" /></li></ul></event><remarks><PARA>Save the segmented image, before masking and morphology, as part of the blob results.  Otherwise, the image will be released once blob analysis has completed and the <see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" /> method will return Nothing when requesting this image.</PARA></remarks><summary>Save the segmented image, before masking and morphology, as part of the blob results.  Otherwise, the image will be released once blob analysis has completed and the CreateSegmentedImage method will return Nothing when requesting this image.</summary><example><code lang="Visual Basic">
   Imports Cognex.VisionPro
   Imports Cognex.VisionPro.Blob
   
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim myImage As CogImage8Grey
    myBlob.SaveSegmentedImageBeforeMasking = True
    myBlobResults = myBlob.Execute(mobjImage, r)
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMasking, True)
    cdDisp.Image = myImage
    End Sub
    </code><code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
       private void doBlob()
    {
      CogBlob myBlob=new CogBlob();
      CogBlobResults myBlobResults;
      CogImage8Grey myImage; 
      myBlob.SaveSegmentedImageBeforeMasking = true;
      myBlobResults = myBlob.Execute(mobjImage,r);
      myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMasking, true);
      cdDisp.Image = myImage;
     }
   </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage"><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_SaveSegmentedImage--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImage" /></li></ul></event><remarks><PARA>
Save the segmented image as part of the blob results.  
You must set this property to True if you wish to call <see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" />
 If you do not set this property to true, 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" /> returns a NULL image.</PARA><DEFAULT>False</DEFAULT></remarks><summary>Save the segmented image as part of the blob results.  Otherwise, the image will be released once blob analysis has completed and the CreateSegmentedImage method of ICogBlobResults will return Nothing when requesting this image.</summary><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim myImage As CogImage8Grey
    myBlob.SaveSegmentedImage = True
    myBlobResults = myBlob.Execute(mobjImage, r)
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.cogBlobSegmentedImage, True)
    cdDisp.Image = myImage
    End Sub
  </code><code lang="C#">
   using Cognex.VisionPro; 
   using Cognex.VisionPro.Blob;
   
       private void doBlob()
    {
      CogBlob myBlob=new CogBlob();
      CogBlobResults myBlobResults;
      CogImage8Grey myImage; 
      myBlob.SaveSegmentedImage = true;
      myBlobResults = myBlob.Execute(mobjImage,r);
      myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.cogBlobSegmentedImage, true);
      cdDisp.Image = myImage;
     }
   </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.RunTimeMeasures"><summary>A collection indicating how the specified measures will be used during execution of blob analysis.  Blob measures can either be used as filter criteria or precomputed such the time required to calculate the measure is part of the blob execution time.</summary><remarks><PARA>
A collection of <see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects 
indicating how the specified measures will be used during execution of blob analysis.  Blob measures can either be used as filter criteria or precomputed such the time required to calculate the measure is part of the blob execution time.
</PARA><PARA>
You must sink change events from the <ITALIC>collection</ITALIC> to be notified
when the measures change. This function only generates an event when the reference
to the collection changes.
</PARA><DEFAULT>An empty collection.</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_RunTimeMeasures--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfRunTimeMeasures" /></li></ul></event><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
    </code><code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
    </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.MorphologyOperations"><remarks><PARA>
A collection of <see cref="T:Cognex.VisionPro.Blob.CogBlobMorphologyConstants" /> indicating which morphology operations are to be performed on the segmented image. The operations are performed in the order in which they are added to the collection. Operations can be added multiple times.
</PARA><DEFAULT>An empty collection</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_MorphologyOperations--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfMorphologyOperations" /></li></ul></event><summary>A collection of CogBlobMorphologyConstants indicating which morphology operations are to be performed on the segmented image.  The operations are performed in the order in which they are added to the collection.  Operations can be added multiple times.</summary><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim myImage As CogImage8Grey
    myBlob.SaveSegmentedImage = True
    myBlob.SaveSegmentedImageBeforeMorphology = True
    myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.DilateSquare)
    myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.OpenSquare)
    myBlobResults = myBlob.Execute(mobjImage, r)
    TextBox1.Text = myBlobResults.GetBlobs.Count
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMorphology, True)
    cdDisp.Image = myImage
    MsgBox("next")
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.cogBlobSegmentedImage, True)
    cdDisp.Image = myImage
    End Sub
    </code><code lang="C#">
   using Cognex.VisionPro; 
   using Cognex.VisionPro.Blob;
   
      private void doBlob()
    {
    CogBlob myBlob=new CogBlob(); 
    CogBlobResults myBlobResults; 
    CogImage8Grey myImage; 
    myBlob.SaveSegmentedImage = true;
    myBlob.SaveSegmentedImageBeforeMorphology = true;
    myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.DilateSquare);
    myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.OpenSquare);
    myBlobResults = myBlob.Execute(mobjImage, r);
    textBox1.Text =  myBlobResults.GetBlobs(true).Count.ToString();
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMorphology, true);
    cdDisp.Image = myImage;
    MessageBox.Show("next");
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.cogBlobSegmentedImage, true);
    cdDisp.Image = myImage;
    }
    </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle"><summary>The angle (in radians) at which the bounding box or median point is computed when the axis argument of MedianX, MedianY, or GetBoundingBox is cogBlobAxisExtremaAngle.  The extrema angle is specified in the selected space of the input image.</summary><remarks><PARA>
The angle (in radians) at which the bounding box or median point is computed when the axis argument of 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianX(Cognex.VisionPro.Blob.CogBlobAxisConstants)" />,
 <see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianY(Cognex.VisionPro.Blob.CogBlobAxisConstants)" />, or 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBox(Cognex.VisionPro.Blob.CogBlobAxisConstants)" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">ExtremaAngle</see>. 
The extrema angle is specified in the selected space of the input image.
</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_ExtremaAngle--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaAngle" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeAreaPercent"><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_ExtremaExcludeAreaPercent--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeAreaPercent" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is 
	less than zero or greater than or equal to 50.</para></exception><summary>The amount of area to exclude when computing either a bounding box or median point, only used when the ExtremaExcludeMode is set to cogBlobExtremaExcludeAreaPercent.  The area is specified in terms of percentage of pixels to exclude.</summary><remarks><PARA>
The amount of area to exclude when computing either a bounding box or median point, only used when the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" /> is set to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants">AreaPercent</see>.  
The area is specified in terms of percentage of pixels to exclude.
</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeAreaPixels"><summary>The amount of area to exclude when computing either a bounding box or median point, only used when the ExtremaExcludeMode is set to cogBlobExtremaExcludeAreaPixels.  The area is specified in image pixel units.</summary><remarks><PARA>
The amount of area to exclude when computing either a bounding box or median point, only used when the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" /> is set to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants">AreaPixels</see>.  
The area is specified in image pixel units.
</PARA><DEFAULT>0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is 
	less than zero.</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_ExtremaExcludeAreaPixels--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeAreaPixels" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeArea"><remarks><PARA>
The amount of area to exclude when computing either a bounding box or median point, only used when the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" /> is set to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants">Area</see>.  
The area is specified in units of the selected space of the InputImage.
</PARA><DEFAULT>0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is 
	less than zero.</para></exception><summary>The amount of area to exclude when computing either a bounding box or median point, only used when the ExtremaExcludeMode is set to cogBlobExtremaExcludeArea.  The area is specified in units of the selected space of the InputImage.</summary><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_ExtremaExcludeArea--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeArea" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is 
	not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants" />.</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_ExtremaExcludeMode--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeMode" /></li></ul></event><remarks><PARA>
A value 
from <see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants" /> that determines what, if any, part of the feature's area should be excluded when making the median and bounding box measures.  If area should be excluded, the mode also indicates which property specifies the area to be excluded.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants">None</see></DEFAULT></remarks><summary>Indicates if some of the feature's area should be excluded when making the median and bounding box measures.  If area should be excluded, the mode also indicates which property specifies the area to be excluded.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityMinPixels"><summary>The minimum size, in pixels, of features that will not be cleaned up during connectivity cleanup.  ConnectivityCleanup is not available when connectivity mode is set to whole image, in which case the cleanup and minimum pixels settings are simply ignored.</summary><remarks><PARA>
The minimum size, in pixels, of features that will not be cleaned up during connectivity cleanup.  Connectivity cleanup is not available when connectivity mode is set to whole image, in which case the cleanup and minimum pixels settings are simply ignored.
</PARA><DEFAULT>10</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is 
	less than zero.</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_ConnectivityMinPixels--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityMinPixels" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Blob

myBlob = New CogBlob
myBlobResults = New CogBlobResults

Private Sub doBlob()
    myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Prune
    myBlob.ConnectivityMinPixels = 100
    myBlob.ConnectivityMode = CogBlobConnectivityModeConstants.Labeled
    myBlobResults = myBlob.Execute(anImage, Nothing)
    debug.WriteLine("Count is:" + myBlobResults.GetBlobs.Count.ToString)
End Sub
    	</code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Blob;

private CogBlob myBlob;
private CogBlobResults myBlobResults;

myBlob = new CogBlob();
myBlobResults = new CogBlobResults();

private void doBlob()
{
	myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Prune;
	myBlob.ConnectivityMinPixels = 100;
	myBlob.ConnectivityMode = CogBlobConnectivityModeConstants.Labeled;
	myBlob.Execute(anImage, NULL);
	debug.WriteLine("Count is:" + myBlobResults.GetBlobs.Count.ToString);
}
	</code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityCleanup"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is 
	not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants" />.</para></exception><remarks><PARA>
Determines the 
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants">cleanup method</see> 
to use after performing connectivity analysis of the blobs. Connectivity cleanup is not available when connectivity mode is set to whole image, in which case the cleanup and minimum pixels settings are simply ignored.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants">Fill</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_ConnectivityCleanup--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityCleanup" /></li></ul></event><summary>Determines the cleanup method to use after performing connectivity analysis of the blobs.  ConnectivityCleanup is not available when connectivity mode is set to whole image, in which case the cleanup and minimum pixels settings are simply ignored.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Blob

myBlob = New CogBlob
myBlobResults = New CogBlobResults

Private Sub doBlob()
    myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Prune
    myBlob.ConnectivityMinPixels = 100
    myBlob.ConnectivityMode = CogBlobConnectivityModeConstants.Labeled
    myBlobResults = myBlob.Execute(anImage, Nothing)
    debug.WriteLine("Count is:" + myBlobResults.GetBlobs.Count.ToString)
End Sub
    	</code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Blob;

private CogBlob myBlob;
private CogBlobResults myBlobResults;

myBlob = new CogBlob();
myBlobResults = new CogBlobResults();

private void doBlob()
{
	myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Prune;
	myBlob.ConnectivityMinPixels = 100;
	myBlob.ConnectivityMode = CogBlobConnectivityModeConstants.Labeled;
	myBlob.Execute(anImage, NULL);
	debug.WriteLine("Count is:" + myBlobResults.GetBlobs.Count.ToString);
}
	</code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityMode"><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_ConnectivityMode--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityMode" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is 
	not a member of <see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants" />.</para></exception><summary>Determines the connectivity to be used when analyzing blobs.</summary><remarks><PARA>
A value from <see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants" /> that
determines what connectivity mode is used to connect object pixels
into blobs.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">GreyScale</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlob.SegmentationParams"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is NULL.</para></exception><event cref="E:Cognex.VisionPro.Blob.CogBlob.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogBlob_SegmentationParams--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSegmentationParams" /></li></ul></event><summary>Interface which allows the user to select and configure the desired method of image segmentation.</summary><remarks><PARA>
An <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> that determines how the image 
is segmented into object and background pixels.
</PARA><DEFAULT>A default-constructed <see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /> object. </DEFAULT></remarks><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
    </code><code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
    </code></example></member><member name="P:Cognex.VisionPro.Blob.CogBlob.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlob.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlob.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlob.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlob.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlob.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlob.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The input image to analyze.</PARA></param><param name="region"><PARA>An optional <see cref="T:Cognex.VisionPro.CogRegion" />. If supplied, only the pixels which lie within this region (subject to the value of
<see cref="P:Cognex.VisionPro.Blob.CogBlob.RegionMode" />) will be analyzed.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>
		The selected space of <paramref name="region" /> is not
		a valid space in <paramref name="inputImage" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="region" /> is completely outside of <paramref name="inputImage" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImageException" cgnxHRESULT="E_CogBlob_NoSubtractionImage"><para>
		The <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">segmentation mode</see> is 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see> and the <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" /> was NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImagePixelsException" cgnxHRESULT="E_CogBlob_NoSubtractionImagePixels"><para>
		The <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">segmentation mode</see> is 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see> and the <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" /> has no pixels.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSubtractionImageAlignmentErrorException" cgnxHRESULT="E_CogBlob_SubtractionImageAlignmentError"><para>
The <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">segmentation mode</see>  is 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see> and the <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" /> does not completely overlap <paramref name="region" />
of <paramref name="inputImage" />. This is usually because the subtraction image is too 
small or because incorrect offset values were supplied.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobDuplicateMeasureException" cgnxHRESULT="E_CogBlob_DuplicateMeasure"><para>
		The collection of <see cref="P:Cognex.VisionPro.Blob.CogBlob.RunTimeMeasures">run-time measures</see> contains a duplicate. Only one object per measure is allowed.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException" cgnxHRESULT="E_CogBlob_InvalidMeasure"><para>
		One or more of the following measures was specified for whole-image blob analysis:
		<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">BoundaryPixelLength</see>, 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Perimeter</see>, 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Acircularity</see>, or 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">AcircularityRms</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobDynamicThresholdNotComputedException" cgnxHRESULT="E_CogBlob_DynamicThresholdNotComputed"><para>
The <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">segmentation mode</see> is  
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">HardDynamicThreshold</see> but a dynamic threshold could not be computed, probably because you specified the same 
value for both the <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow">low</see> and
	<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh">high</see> tail percentages.
		</para></exception><returns><PARA>An <see cref="T:Cognex.VisionPro.Blob.CogBlobResults" /> containing the results of the analysis.</PARA></returns><summary>Performs blob analysis on the provided InputImage and optional Region, creating a CogBlobResults object which provides the results of the analysis.  If Region is nothing then blob analysis will be performed on the entire InputImage.</summary><remarks><PARA>
Performs blob analysis on the
supplied <paramref name="inputImage" /> and optional 
<paramref name="region" />, 
creating a <see cref="T:Cognex.VisionPro.Blob.CogBlobResults" /> object which provides 
the results of the analysis.  
If <paramref name="region" /> is nothing then blob analysis will 
be performed on the entire input image.
</PARA></remarks><example><code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image' txtUtil is a text box
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
    </code><code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image' txtUtil is a text box
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
    </code></example></member><member name="E:Cognex.VisionPro.Blob.CogBlob.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobTool"><summary>This is the class for the CogBlobTool.  The CogBlobTool encapsulates all of the classes required to perform a blob analysis inspection.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobTool.#ctor(Cognex.VisionPro.Blob.CogBlobTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfResults"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Results may have changed.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobTool.Results"><remarks><PARA>Results from the last invocation of Run.</PARA></remarks><summary>Results from the last invocation of Run.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobTool.RunParams"><summary>The run parameters for this blob tool.</summary><remarks><PARA>The blob run parameters.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfRunParams" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage"><remarks><PARA>The input image for the blob tool.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>Image used to perform blob analysis.  The Region property can be used to specify that blob analysis will be performed only on a portion of the InputImage.  Blob analysis is performed on the entire InputImage if Region is Nothing.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfInputImage" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobTool.Region"><remarks><PARA>The blob tool region of interest.
	The <see cref="P:Cognex.VisionPro.Blob.CogBlob.RegionMode" /> determines how the input
	region is used to control which pixels are analyzed.
	If no region is supplied, the tool performs blob analysis on the entire 
	<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />.</PARA></remarks><summary>Specifies the region of the InputImage that will be used to perform blob analysis.  The ICogBlobParams::RegionMode property specifies exactly how the ROI will be applied to the InputImage.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobTool_Region--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfRegion" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobTool.CurrentRecordEnable"><remarks><PARA>
	Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> 
	of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants" />.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants">InputImage</see> + 
   <see cref="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants">Region</see> +
   <see cref="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants">Histogram</see>.
	</DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfLastRunRecordDiagEnable" /></li></ul></event><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants" />. These are diagnostic records that may cause the tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">InputImageByReference</see>.
</DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogBlobTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfLastRunRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><remarks><PARA>
	Enable 
	the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord">creation</see> 
	of records by bitwise ORing the appropriate LastRunRecordConstants.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants">BlobImage</see> +
 <see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants">BlobImageUnfiltered</see> +
 <see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants">ResultsBoundary</see>.
	</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobTool.RunStatus"><summary>Gets general information about the last call to Run.</summary><remarks><para>Provides information about the results of running the Blob tool.</para></remarks></member><member name="P:Cognex.VisionPro.Blob.CogBlobTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; Other clients who wish to clone this instance should call ICloneable.Clone.</summary></member><member name="M:Cognex.VisionPro.Blob.CogBlobTool.Run"><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>
		The selected space of <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.Region" /> is not
		a valid space in <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.Blob.CogBlobTool.Region" /> is completely outside of <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImageException" cgnxHRESULT="E_CogBlob_NoSubtractionImage"><para>
		The <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">segmentation mode</see>  is 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see> and a NULL <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" /> was supplied.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImageException" cgnxHRESULT="E_CogBlob_NoSubtractionImage"><para>
		The <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">segmentation mode</see>  is 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see> and the <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" /> had no pixels.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSubtractionImageAlignmentErrorException" cgnxHRESULT="E_CogBlob_SubtractionImageAlignmentError"><para>
The <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">segmentation mode</see>  is 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see> and the <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />  does not completely overlap <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.Region" />
of <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />. This is usually because the subtraction image is too 
small or because incorrect offset values were supplied.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobDuplicateMeasureException" cgnxHRESULT="E_CogBlob_DuplicateMeasure"><para>
		The collection of <see cref="P:Cognex.VisionPro.Blob.CogBlob.RunTimeMeasures">run-time measures</see> contains a duplicate. Only one object per measure is allowed.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException" cgnxHRESULT="E_CogBlob_InvalidMeasure"><para>
		One or more of the following measures was specified for whole-image blob analysis:
		<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">BoundaryPixelLength</see>, 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Perimeter</see>, 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Acircularity</see>, or 
		<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">AcircularityRms</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobDynamicThresholdNotComputedException" cgnxHRESULT="E_CogBlob_DynamicThresholdNotComputed"><para>
		The <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">segmentation mode</see> is  
		<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">HardDynamicThreshold</see> but a dynamic threshold could not be computed, probably because you specified the same 
value for both the <see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow">low</see> and
	<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh">high</see> tail percentages.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.Blob.CogBlobTool.RunParams" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageErrorException" cgnxHRESULT="E_CogBlob_SaveSegmentedImageError"><para><see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage" /> is
set to False but 
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">SegmentedImage</see> 
is set in <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable" />.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageBeforeMaskingErrorException" cgnxHRESULT="E_CogBlob_SaveSegmentedImageBeforeMaskingError"><para><see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking" /> is
set to False but 
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">SegmentedImageBeforeMasking</see> 
is set in <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable" />.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageBeforeMorphologyErrorException" cgnxHRESULT="E_CogBlob_SaveSegmentedImageBeforeMorphologyError"><para><see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology" /> is
set to False but 
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">SegmentedImageBeforeMorphology</see> 
is set in <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable" />.
</para></exception><remarks><PARA>Performs blob analysis on the <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />
	using the supplied <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.RunParams" />. You can specify that 
	analysis be limited to part of the input image by supplying a value for the 
	<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.Region" /> property.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><summary>Runs the tool using the current parameter settings.</summary><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
		
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.Blob.CogBlobTool" /> returns or in a
			<event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfResults" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><example><code lang="C#">
        using Cognex.VisionPro;
        using Cognex.VisionPro.Blob;
        using Cognex.VisionPro.ImageFile;

        // This function finds two holes in the bracket.
        public void FindBlobs()
        {
        CogImageFileTool mCogImageFileTool = new CogImageFileTool();
        CogBlobTool mCogBlobTool = new CogBlobTool();
        CogBlobMeasure mAreaMeasure = new CogBlobMeasure();
        CogBlobMeasure mElongationMeasure = new CogBlobMeasure();
        CogBlobResultCollection mBlobResults;

        // Load the breacket image as the input image.
        mCogImageFileTool.Operator.Open(@"C:\Program Files\Cognex\VisionPro\images\bracket_std.idb",
        CogImageFileModeConstants.Read);
        mCogImageFileTool.Run();

        mCogBlobTool.InputImage = (CogImage8Grey)mCogImageFileTool.OutputImage;
        mCogBlobTool.RunParams.SegmentationParams.Polarity = CogBlobSegmentationPolarityConstants.LightBlobs;

        // Set Area Filter, select blobs whose area is between 450 and 500.
        mAreaMeasure.Measure = CogBlobMeasureConstants.Area;
        mAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
        mAreaMeasure.FilterRangeHigh = 550;
        mAreaMeasure.FilterRangeLow = 450;
        mAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

        // Set Elongation Filter from 0.8 to 1.2
        mElongationMeasure.Measure = CogBlobMeasureConstants.Elongation;
        mElongationMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
        mElongationMeasure.FilterRangeHigh = 1.2;
        mElongationMeasure.FilterRangeLow = 0.8;
        mElongationMeasure.Mode = CogBlobMeasureModeConstants.Filter;

        mCogBlobTool.RunParams.RunTimeMeasures.Add(mAreaMeasure);
        mCogBlobTool.RunParams.RunTimeMeasures.Add(mElongationMeasure);

        mCogBlobTool.Run();
        mBlobResults = mCogBlobTool.Results.GetBlobs();

        Console.WriteLine("Number of Blobs: {0}", mBlobResults.Count);

        // Print information for each blob found
        foreach (CogBlobResult blobResult in mBlobResults)
        {
        Console.WriteLine("ID: {0}, CenterX: {1}, CenterY: {2}, Area: {3}",
        blobResult.ID, blobResult.CenterOfMassX, blobResult.CenterOfMassY, blobResult.Area);
        }
        }
      </code><code lang="Visual Basic">
        Imports Cognex.VisionPro
        Imports Cognex.VisionPro.Blob
        Imports Cognex.VisionPro.ImageFile

        Public Sub FindBlobs()
        ' This function finds two holes in the bracket.
        Dim myCogImageFileTool As CogImageFileTool = New CogImageFileTool()
        Dim myCogBlobTool As CogBlobTool = New CogBlobTool()
        Dim myAreaMeasure As CogBlobMeasure = New CogBlobMeasure()
        Dim myElongationMeasure As CogBlobMeasure = New CogBlobMeasure()
        Dim myBlobResults As CogBlobResultCollection

        ' Load the breacket image as the input image.
        myCogImageFileTool.Operator.Open("C:\Program Files\Cognex\VisionPro\images\bracket_std.idb", CogImageFileModeConstants.Read)
        myCogImageFileTool.Run()

        myCogBlobTool.InputImage = CType(myCogImageFileTool.OutputImage, CogImage8Grey)
        myCogBlobTool.RunParams.SegmentationParams.Polarity = CogBlobSegmentationPolarityConstants.LightBlobs

        ' Set Area Filter
        myAreaMeasure.Measure = CogBlobMeasureConstants.Area
        myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
        myAreaMeasure.FilterRangeHigh = 550
        myAreaMeasure.FilterRangeLow = 450
        myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

        ' Set Elongation Filter
        myElongationMeasure.Measure = CogBlobMeasureConstants.Elongation
        myElongationMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
        myElongationMeasure.FilterRangeHigh = 1.2
        myElongationMeasure.FilterRangeLow = 0.8
        myElongationMeasure.Mode = CogBlobMeasureModeConstants.Filter

        myCogBlobTool.RunParams.RunTimeMeasures.Add(myAreaMeasure)
        myCogBlobTool.RunParams.RunTimeMeasures.Add(myElongationMeasure)

        myCogBlobTool.Run()
        myBlobResults = myCogBlobTool.Results.GetBlobs()

        Console.WriteLine("Number of Blobs: {0}", myBlobResults.Count)

        ' Print information for each blob found
        For Each blobResult As CogBlobResult In myBlobResults
        Console.WriteLine("ID: {0}, CenterX: {1}, CenterY: {2}, Area: {3}", _
        blobResult.ID, blobResult.CenterOfMassX, blobResult.CenterOfMassY, blobResult.Area)
        Next
        End Sub
      </code></example></member><member name="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants"><summary>Enumeration of blob segmentation modes which indicate how the input image will be segmented into blob and background pixels.</summary><remarks><PARA>Enumeration of blob segmentation modes which indicate how the input image will be segmented into blob and background pixels.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.SoftRelativeThreshold"><summary>Segment the input image using a pair of soft threshold values that are determined at run-time based on specified percentage of the distances between the low tail pixel value and the high tail pixel value of the input image's histogram.</summary><remarks><PARA>Segment the input image using a pair of soft threshold values that are determined at run-time based on specified percentage of the distances between the low tail pixel value and the high tail pixel value of the input image's histogram.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.SoftFixedThreshold"><summary>Segment the input image using a pair of threshold values specified in image grey scale units.  Pixels values outside of the thresholds are either entirely part of a blob or the background.  Values between the thresholds are part blob and part background.</summary><remarks><PARA>Segment the input image using a pair of threshold values specified in image grey scale units.  Pixels values outside of the thresholds are either entirely part of a blob or the background.  Values between the thresholds are part blob and part background.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.HardDynamicThreshold"><summary>Segments the input image using a hard threshold value that is determined at run-time based on an analysis of the input image's histogram.</summary><remarks><PARA>
	Segments the input image using a hard threshold value that is determined at run-time based on an analysis of the input image's histogram. The analysis
computes the hard threshold which minimizes the weighted variance among the pixels 
on each side of the threshold. This tends to produce a good threshold for images
with bimodal distributions of pixel values.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.None"><remarks><PARA>No image segmentation is performed.  Use this mode if the input image is already segmented.  Pixels with a value equal to ScalingValue receive a blob weight of one.  All other pixel values are interpreted on a linear scale relative to ScalingValue.</PARA></remarks><summary>No image segmentation is performed.  Use this mode if the input image is already segmented.  Pixels with a value equal to ScalingValue receive a blob weight of one.  All other pixel values are are interpreted on a linear scale relative to ScalingValue.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.SubtractionImage"><summary>Segment the input image by performing a pixel map (PostMap) on the image that results from subtracting each pixel in SubtractionImage from the corresponding pixel in the input image (after PreMap applied) with the result clamped to zero.</summary><remarks><PARA>Segment the input image by performing a pixel map (PostMap) on the image that results from subtracting each pixel in SubtractionImage from the corresponding pixel in the input image (after PreMap applied) with the result clamped to zero.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.HardRelativeThreshold"><summary>Segment the input image using a single threshold value that is determined at run-time based on a specified percentage (HardRelativeThreshold) of the distance between the low tail pixel value and the high tail pixel value of the input image's histogram.</summary><remarks><PARA>Segment the input image using a single threshold value that is determined at run-time based on a specified percentage (HardRelativeThreshold) of the distance between the low tail pixel value and the high tail pixel value of the input image's histogram.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.HardFixedThreshold"><summary>Segment the input image using a single threshold value specified in image grey scale units.  This hard threshold determines if an image pixel is entirely part of a blob or constitutes a background pixel.</summary><remarks><PARA>Segment the input image using a single threshold value specified in image grey scale units.  This hard threshold determines if an image pixel is entirely part of a blob or constitutes a background pixel.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.Map"><remarks><PARA>Segment the input image using a pixel map.  Each pixel in the input image is replaced by the value within the pixel map at the index equal to the input image pixel value.  ScalingValue is used to assign blob weights based on the mapped pixel values.</PARA></remarks><summary>Segment the input image using a pixel map.  Each pixel in the input image is replaced by the value within the pixel map at the index equal to the input image pixel value.  ScalingValue is used to assign blob weights based on the mapped pixel values.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants"><remarks><PARA>Enumeration that indicates blob polarity when using either soft or hard thresholding for image segmentation.</PARA></remarks><summary>Enumeration that indicates blob polarity when using either soft or hard thresholding for image segmentation.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants.LightBlobs"><remarks><PARA>Polarity indicating that image should be segmented for light blobs on a dark background.</PARA></remarks><summary>Polarity indicating that image should be segmented for light blobs on a dark background.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants.DarkBlobs"><remarks><PARA>Polarity indicating that image should be segmented for dark blobs on a light background.</PARA></remarks><summary>Polarity indicating that image should be segmented for dark blobs on a light background.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants"><summary>Enumeration of the various measurements that can be performed on a specified blob.  Measurements can be obtained by calling the Measure property of a blob result.  Measurements can also be used to specify blob filtering &amp; sorting criteria.</summary><remarks><PARA>
Enumeration of the various 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="properties_of_blobs">measurements</see> 
that can be performed on a specified blob.  Measurements can be obtained by calling the 
Measure property of a blob result.  Measurements can also be used to specify blob filtering 
&amp; sorting criteria.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Label"><remarks><PARA>The connectivity label.  For grey scale connectivity, the label will be 1 for blobs and 0 for holes.  For labeled connectivity, this is the blob's label.</PARA></remarks><summary>The connectivity label.  For grey scale connectivity, the label will be 1 for blobs and 0 for holes.  For labeled connectivity, this is the blob's label.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisAspect"><remarks><PARA>The ratio of height to width of the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</PARA></remarks><summary>The ratio of height to width of the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisHeight"><summary>The height of the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</summary><remarks><PARA>The height of the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisWidth"><remarks><PARA>The width of the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</PARA></remarks><summary>The width of the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisMaxY"><summary>The maximum y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</summary><remarks><PARA>The maximum y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</PARA><PARA>
This measure is specified in a coordinate space which is a rotated and 
translated version of the input image's selected space.  The origin of 
the new space is the blob's center of mass and is rotated by rotated by 
the angle of the blob's principal axis.  
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisMinY"><summary>The minimum y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</summary><remarks><PARA>The minimum  y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</PARA><PARA>
This measure is specified in a coordinate space which is a rotated and 
translated version of the input image's selected space.  The origin of 
the new space is the blob's center of mass and is rotated by rotated by 
the angle of the blob's principal axis.  
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisMaxX"><summary>The maximum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</summary><remarks><PARA>The maximum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</PARA><PARA>
This measure is specified in a coordinate space which is a rotated and 
translated version of the input image's selected space.  The origin of 
the new space is the blob's center of mass and is rotated by rotated by 
the angle of the blob's principal axis.  
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisMinX"><summary>The minimum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</summary><remarks><PARA>The minimum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</PARA><PICTURE SRC="mPrincipalBox.jpg" apiSRC="cogBlobMeasureBoundingBoxPrincipalAxisMinX_mPrincipalBox.jpg" /><PARA>
This measure is specified in a coordinate space which is a rotated and 
translated version of the input image's selected space.  The origin of 
the new space is the blob's center of mass and is rotated by rotated by 
the angle of the blob's principal axis.  
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleAspect"><summary>The ratio of height to width of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ExtremaAngle.</summary><remarks><PARA>
The ratio of height to width of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by 
the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> property.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleHeight"><remarks><PARA>The height of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by 
the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> property.</PARA></remarks><summary>The height of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ExtremaAngle.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleWidth"><summary>The width of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ExtremaAngle.</summary><remarks><PARA>The width of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by 
the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> property.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleMaxY"><remarks><PARA>
The maximum y-coordinate enclosed by the smallest rectangle that completely encloses the 
blob and is aligned with the angle specified by 
the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> property.
</PARA><PARA>
This measure is specified in a coordinate space which is a rotated and 
translated version of the input image's selected space.  The origin of 
the new space is the blob's center of mass and is rotated by the angle 
specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.  
</PARA></remarks><summary>The maximum y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ExtremaAngle.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleMinY"><remarks><PARA>The minimum  y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the angle specified by 
the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> property.</PARA><PARA>
This measure is specified in a coordinate space which is a rotated and 
translated version of the input image's selected space.  The origin of 
the new space is the blob's center of mass and is rotated by the angle 
specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.  
</PARA></remarks><summary>The minimum y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ExtremaAngle.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleMaxX"><remarks><PARA>The maximum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the angle specified by 
the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> property.</PARA><PARA>
This measure is specified in a coordinate space which is a rotated and 
translated version of the input image's selected space.  The origin of 
the new space is the blob's center of mass and is rotated by the angle 
specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.  
</PARA></remarks><summary>The maximum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ExtremaAngle.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleMinX"><remarks><PARA>The minimum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the angle specified by 
the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> property.</PARA><PARA>
This measure is specified in a coordinate space which is a rotated and 
translated version of the input image's selected space.  The origin of 
the new space is the blob's center of mass and is rotated by the angle 
specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.  
</PARA></remarks><summary>The minimum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ExtremaAngle.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleCenterY"><summary>The y-coordinate of the center point of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ExtremaAngle.</summary><remarks><PARA>The y-coordinate of the center point of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by 
the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> property.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleCenterX"><remarks><PARA>The x-coordinate of the center point of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by 
the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> property.</PARA><PICTURE SRC="mExtremaAngleBox.jpg" apiSRC="cogBlobMeasureBoundingBoxExtremaAngleCenterX_mExtremaAngleBox.jpg" /></remarks><summary>The x-coordinate of the center point of the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ExtremaAngle.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.MedianExtremaAngleY"><summary>The y-coordinate of the point through which two orthogonal lines each divide the blob's area in half.  The orthogonal lines are aligned with the angle specified by ExtremaAngle.  The value of x is specified in units of the input image's selected space.</summary><remarks><PARA>The y-coordinate of the point through which two orthogonal lines each divide the blob's area in half.  The orthogonal lines are aligned with the angle specified by <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.  The value of x is specified in units of the input image's selected space.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.MedianExtremaAngleX"><remarks><PARA>The x-coordinate of the point through which two orthogonal lines each divide the blob's area in half.  The orthogonal lines are aligned with the angle specified by <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.  The value of x is specified in units of the input image's selected space.</PARA></remarks><summary>The x-coordinate of the point through which two orthogonal lines each divide the blob's area in half.  The orthogonal lines are aligned with the angle specified by ExtremaAngle.  The value of x is specified in units of the input image's selected space.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeAspect"><remarks><PARA>The ratio of height to width of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</PARA></remarks><summary>The ratio of height to width of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeHeight"><summary>The height of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</summary><remarks><PARA>The height of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeWidth"><summary>The width of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</summary><remarks><PARA>The width of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeMaxY"><summary>The maximum y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</summary><remarks><PARA>The maximum y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeMinY"><summary>The minimum y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</summary><remarks><PARA>The minimum y-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeMaxX"><remarks><PARA>The maximum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</PARA></remarks><summary>The maximum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeMinX"><summary>The minimum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</summary><remarks><PARA>The minimum x-coordinate enclosed by the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeCenterY"><remarks><PARA>The y-coordinate of the center point of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</PARA></remarks><summary>The y-coordinate of the center point of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeCenterX"><remarks><PARA>The x-coordinate of the center point of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</PARA><PICTURE SRC="mPixelBox.jpg" apiSRC="cogBlobMeasureBoundingBoxPixelAlignedNoExcludeCenterX_mPixelBox.jpg" /></remarks><summary>The x-coordinate of the center point of the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.  No exclude extrema settings are used for this calculation.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.CenterMassY"><remarks><PARA>The y-coordinate of the center of mass of the blob specified in units of the input image's selected space at run-time.</PARA></remarks><summary>The y-coordinate of the center of mass of the blob specified in units of the input image's selected space at run-time.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.CenterMassX"><summary>The x-coordinate of the center of mass of the blob specified in units of the input image's selected space at run-time.</summary><remarks><PARA>The x-coordinate of the center of mass of the blob specified in units of the input image's selected space at run-time.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundaryPixelLength"><summary>The length of the pixel aligned boundary of this blob specified in image pixel units.  This measure is not available when using whole-image connectivity.</summary><remarks><PARA>
The length of the pixel aligned boundary of this blob specified in image pixel units.  
This measure is computed by taking measuring the length of a boundary drawn along the
outside edge of each pixel that makes up the blob.
This measure is not available when using whole-image connectivity.
</PARA><PICTURE SRC="mBoundaryPixelLength.jpg" apiSRC="cogBlobMeasureBoundaryPixelLength_mBoundaryPixelLength.jpg" /></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Angle"><summary>The angle of the principal axis of the blob specified in units of the input image's selected space at run-time.  This value is not very meaningful if the elongation measure is very close to one.</summary><remarks><PARA>
The angle of the principal axis of the blob 
specified in units of the input image's selected 
space at run-time. The angle is measured from
the X-axis of the selected space to the principal 
axis of the blob and is in the range -π/2 
radians to +π/2 radians. This value is not 
very meaningful if the elongation measure is very close to one.
</PARA><PICTURE SRC="mAngle.jpg" apiSRC="cogBlobMeasureAngle_mAngle.jpg" /></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Perimeter"><remarks><PARA>
The perimeter of the blob specified in units of the input image's selected space at run-time.  This measure is a corrected version of the 
<BOLD>BoundaryPixelLength</BOLD>
that adjusts for the tendency of
<BOLD>BoundaryPixelLength</BOLD>
to overstate the true blob perimeter.  Not available for whole-image connectivity.
</PARA></remarks><summary>The perimeter of the blob specified in units of the input image's selected space at run-time.  Formula corrects for the tendency of the pixel aligned boundary of the blob to overstate the true blob perimeter.  Not available for whole-image connectivity.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Area"><summary>The area of the blob specified in units of the input image's selected space at run-time.  The area measure, as do many other blob measures, takes into account the blob weight [0,1] of each pixel.</summary><remarks><PARA>
The area of the blob specified in units of the input image's selected space at run-time.  If you have specified a 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="hard_thresholding">hard threshold</see>, 
then this measure is equal to the number of pixels in the blob. 
If you have specified a 
<see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="soft_thresholding_and_pixel_weighting">soft threshold</see>, then
the area is the sum of the weights (from 0.0 to 1.0) of the pixels in the blob.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.NotClipped"><summary>This measure will be one if the blob was not clipped during processing.  It will be zero if the blob touches the edge of the Region, or the edge of the InputImage, or any Don't Care pixel in the InputImageMask.</summary><remarks><PARA>This measure will be 1.0 if the blob was not clipped during processing.  It will be zero if the blob touches the edge of the region of interest, or the edge of the run-time image, or any Don't Care pixel in the InputImageMask. </PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.AcircularityRms"><remarks><PARA>
The acircularity of this blob as defined by the normalized RMS 
deviation of the boundary point radius values from <ITALIC>r0</ITALIC>, 
where <ITALIC>r0</ITALIC>is the square root of the blob's area divided by 
pi.  This measure is not available when using whole-image connectivity.
</PARA></remarks><summary>The acircularity of this blob as defined by the normalized RMS deviation of the boundary point radius values from r0, where r0 is the square root of the blob's area divided by PI.  This measure is not available when using whole-image connectivity.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Acircularity"><summary>The acircularity of this blob as defined by the formula: Perimeter Squared / (4 x PI x Area).  This measure is not available when using whole-image connectivity.</summary><remarks><PARA>
	The acircularity of this blob as defined by the formula: Perimeter^2 / (4 x PI x Area).  This measure is not available when using whole-image connectivity.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Elongation"><remarks><PARA><see cref="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMax" /> to 
	<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMin" />.
	</PARA></remarks><summary>The ratio of InertiaMax to InertiaMin.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.InertiaMax"><summary>The blob's second moment of inertia about the second principal axis of the blob.</summary><remarks><PARA>The blob's second moment of inertia about the second principal axis of the blob.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.InertiaMin"><remarks><PARA>The blob's second moment of inertia about the principal axis of the blob.</PARA></remarks><summary>The blob's second moment of inertia about the principal axis of the blob.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.InertiaY"><summary>The second moment of inertia of the blob about an axis drawn through the blob's center of mass and parallel to the x axis of selected space of the input image.</summary><remarks><PARA>The second moment of inertia of the blob about an axis drawn through the blob's center of mass and parallel to the X-axis of selected space of the input image.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.InertiaX"><summary>The second moment of inertia of the blob about an axis drawn through the blob's center of mass and parallel to the y axis of selected space of the input image.</summary><remarks><PARA>The second moment of inertia of the blob about an axis drawn through the blob's center of mass and parallel to the Y-axis of selected space of the input image.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.NumUnfilteredChildren"><summary>The number of children of this blob before any filter criteria are applied.</summary><remarks><PARA>The number of children of this blob before any filter criteria are applied.</PARA></remarks></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants"><remarks><PARA>
Enumeration indicating how a specified measure will be used during execution of blob analysis. A given measure can be used to filter blobs, or you can specify that a given
measure be pre-computed when the blob tool is run. (Precomputing a blob measures helps
you get a more accurate measure of the time required to run the tool since by default
measures are not computed until you request them.)
</PARA></remarks><summary>Enumeration indicating how a specified measure will be used during execution of blob analysis.  Blob measures can either be used as filter criteria or precomputed such the time required to calculate the measure is part of the blob analysis execution time.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants.Filter"><summary>Use the specified measure as a blob filter criterion.  Blobs can be filtered out of the final results that have a measurement value that falls either inside or outside of a specified low, high range.</summary><remarks><PARA>
Use the specified measure as a blob filter criteria.  Blobs can be filtered out of the final results that have a measurement value that falls either inside or outside of a specified range of values.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants.PreCompute"><remarks><PARA>
Precompute the specified measure during execution of blob analysis.  Measures that are not precomputed can still be obtained, however, part of the computation may not be performed until the measure is requested.
</PARA></remarks><summary>Precompute the specified measure during execution of blob analysis.  Measures that are not precomputed can still be obtained, however, part of the computation may not be performed until the measure is requested.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants.None"><remarks><PARA>Do not perform any special action regarding the specified measure during execution of blob analysis.</PARA></remarks><summary>Do not perform any special action regarding the specified measure during execution of blob analysis.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobFilterModeConstants"><remarks><PARA>Enumeration indicating how the filter range is to be interpreted.</PARA></remarks><summary>Enumeration indicating how the filter range is to be interpreted.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobFilterModeConstants.IncludeBlobsInRange"><summary>Include blobs in the filtered results only if their measurement value falls within the low, high range.  Note: the low and high limit values are considered to be 'inside' the range.</summary><remarks><PARA>
Include only the blobs in the filtered results that have a measurement value that is greater than or equal to 
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" /> and less than 
or equal to <see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobFilterModeConstants.ExcludeBlobsInRange"><remarks><PARA>
Include only the blobs in the filtered results that have a measurement value that is less than 
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" /> or greater than 
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
</PARA></remarks><summary>Exclude blobs from the filtered results if their measurement value falls within the low, high range.  Note: the low and high limit values are considered to be 'inside' the range.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyConstants"><summary>Morphology operations that can be performed on the segmented image.</summary><remarks><PARA><see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="morphological_operations">Morphology operations</see> that can be performed on the segmented image.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.OpenSquare"><summary>Performs a square opening operation which consists of an erosion followed by a dilation.  Opening eliminates small and/or thin blobs.  It maintains the relative size of larger blobs while smoothing the contours and maintaining holes.</summary><remarks><PARA>Performs a square opening operation which consists of an erosion followed by a dilation.  Opening eliminates small and/or thin blobs.  It maintains the relative size of larger blobs while smoothing the contours and maintaining holes.</PARA><PICTURE SRC="morphOpenS.jpg" apiSRC="cogBlobMorphologyOpenSquare_morphOpenS.jpg" /></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.OpenVertical"><summary>Performs a vertical opening operation which consists of an erosion followed by a dilation.  Opening eliminates small and/or thin blobs.  It maintains the relative size of larger blobs while smoothing the contours and maintaining holes.</summary><remarks><PARA>Performs a vertical opening operation which consists of an erosion followed by a dilation.  Opening eliminates small and/or thin blobs.  It maintains the relative size of larger blobs while smoothing the contours and maintaining holes.</PARA><PICTURE SRC="morphOpenV.jpg" apiSRC="cogBlobMorphologyOpenVertical_morphOpenV.jpg" /></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.OpenHorizontal"><remarks><PARA>Performs a horizontal opening operation which consists of an erosion followed by a dilation.  Opening eliminates small and/or thin blobs.  It maintains the relative size of larger blobs while smoothing the contours and maintaining holes.</PARA><PICTURE SRC="morphOpenH.jpg" apiSRC="cogBlobMorphologyOpenHorizontal_morphOpenH.jpg" /></remarks><summary>Performs a horizontal opening operation which consists of an erosion followed by a dilation.  Opening eliminates small and/or thin blobs.  It maintains the relative size of larger blobs while smoothing the contours and maintaining holes.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.CloseSquare"><summary>Performs a square closing operation which consists of a dilation followed by an erosion.  Closing fills small holes and connects closely situated blobs.  It maintains the relative size of both large and small blobs while smoothing the contours.</summary><remarks><PARA>Performs a square closing operation which consists of a dilation followed by an erosion.  Closing fills small holes and connects closely situated blobs.  It maintains the relative size of both large and small blobs while smoothing the contours.</PARA><PICTURE SRC="morphCloseS.jpg" apiSRC="cogBlobMorphologyCloseSquare_morphCloseS.jpg" /></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.CloseVertical"><remarks><PARA>Performs a vertical closing operation which consists of a dilation followed by an erosion.  Closing fills small holes and connects closely situated blobs.  It maintains the relative size of both large and small blobs while smoothing the contours.</PARA><PICTURE SRC="morphCloseV.jpg" apiSRC="cogBlobMorphologyCloseVertical_morphCloseV.jpg" /></remarks><summary>Performs a vertical closing operation which consists of a dilation followed by an erosion.  Closing fills small holes and connects closely situated blobs.  It maintains the relative size of both large and small blobs while smoothing the contours.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.CloseHorizontal"><summary>Performs a horizontal closing operation which consists of a dilation followed by an erosion.  Closing fills small holes and connects closely situated blobs.  It maintains the relative size of both large and small blobs while smoothing the contours.</summary><remarks><PARA>Performs a horizontal closing operation which consists of a dilation followed by an erosion.  Closing fills small holes and connects closely situated blobs.  It maintains the relative size of both large and small blobs while smoothing the contours.</PARA><PICTURE SRC="morphCloseH.jpg" apiSRC="cogBlobMorphologyCloseHorizontal_morphCloseH.jpg" /></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.DilateSquare"><remarks><PARA>Dilates blobs by replacing the target pixel with the maximum value of the 9 square pixel area centered on the target pixel.</PARA><PICTURE SRC="morphDilationS.jpg" apiSRC="cogBlobMorphologyDilateSquare_morphDilationS.jpg" /></remarks><summary>Dilates blobs by replacing the target pixel with the maximum value of the 9 square pixel area centered on the target pixel.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.DilateVertical"><remarks><PARA>Dilates blobs by replacing the target pixel with the maximum value of the 3 vertical pixels centered on the target pixel.</PARA><PICTURE SRC="morphDilationV.jpg" apiSRC="cogBlobMorphologyDilateVertical_morphDilationV.jpg" /></remarks><summary>Dilates blobs by replacing the target pixel with the maximum value of the 3 vertical pixels centered on the target pixel.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.DilateHorizontal"><summary>Dilates blobs by replacing the target pixel with the maximum value of the 3 horizontal pixels centered on the target pixel.</summary><remarks><PARA>Dilates blobs by replacing the target pixel with the maximum value of the 3 horizontal pixels centered on the target pixel.</PARA><PICTURE SRC="morphDilationH.jpg" apiSRC="cogBlobMorphologyDilateHorizontal_morphDilationH.jpg" /></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.ErodeSquare"><remarks><PARA>Erodes blobs by replacing the target pixel with the minimum value of the 9 square pixel area centered on the target pixel.</PARA><PICTURE SRC="morphErosionS.jpg" apiSRC="cogBlobMorphologyErodeSquare_morphErosionS.jpg" /></remarks><summary>Erodes blobs by replacing the target pixel with the minimum value of the 9 square pixel area centered on the target pixel.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.ErodeVertical"><remarks><PARA>Erodes blobs by replacing the target pixel with the minimum value of the 3 vertical pixels centered on the target pixel.</PARA><PICTURE SRC="morphErosionV.jpg" apiSRC="cogBlobMorphologyErodeVertical_morphErosionV.jpg" /></remarks><summary>Erodes blobs by replacing the target pixel with the minimum value of the 3 vertical pixels centered on the target pixel.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.ErodeHorizontal"><remarks><PARA>Erodes blobs by replacing the target pixel with the minimum value of the 3 horizontal pixels centered on the target pixel.</PARA><PICTURE SRC="morphErosionH.jpg" apiSRC="cogBlobMorphologyErodeHorizontal_morphErosionH.jpg" /></remarks><summary>Erodes blobs by replacing the target pixel with the minimum value of the 3 horizontal pixels centered on the target pixel.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants"><summary>Enumeration of blob connectivity modes.</summary><remarks><PARA>Enumeration of blob <see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="connectivity">connectivity modes</see>.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants.WholeImageGreyScale"><summary>All of the object pixels in the image are analyzed as a single blob, regardless of whether or how they are connected to each other.  No connectivity is performed.  The boundary, perimeter, and acircularity measures are not available when using this mode.</summary><remarks><PARA>
All of the object pixels in the image are analyzed as a single blob, regardless of whether or how they are connected to each other.  No connectivity is performed.  All the blob statistics and measures are computed using every object pixel in the image. The boundary, perimeter, and acircularity measures are not available when using this mode.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants.Labeled"><summary>All pixels with the same label value, from segmentation, are connected into individual features. No concept of object and background.  All features are 6-connected.</summary><remarks><PARA>
All pixels with the same label value, as produced during the image segmentation step, are connected into individual features. There is no notion of object or background pixels.  
All features are <see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="6way_connectivity">6-connected</see>.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants.GreyScale"><summary>Connected object pixels are grouped and analyzed as individual features (blobs and holes).  Blobs are 8-connected. Holes are 4-connected.</summary><remarks><PARA>
	Connected object pixels are grouped and analyzed as individual features (blobs and holes).  
	Blobs are <see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="8way_and_4way_connectivity">8-connected</see>. 
	Holes are <see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="8way_and_4way_connectivity">4-connected</see>.
</PARA></remarks></member><member name="T:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants"><remarks><PARA>
Enumeration of blob <see cref="u:Search.Blob.Theory.ToolTheory" cgnxAnchor="image_pruning_and_filling">connectivity cleanup</see> types.
</PARA></remarks><summary>Enumeration of blob connectivity cleanup types.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants.Fill"><remarks><PARA>
Features below a specified
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityMinPixels">size threshold</see> are filled in 
with the segmentation value of the surrounding feature.  Calculations of measures will 
consider the pruned feature as part of the feature that surrounds the pruned feature.
</PARA></remarks><summary>Features below a specified size threshold are filled in with the segmentation value of the surrounding feature.  Calculations of measures will consider the pruned feature as part of the feature that surrounds the pruned feature.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants.Prune"><summary>Features below a specified size threshold are discarded and will not appear in the results.  Calculations of measures will not consider pixels belonging to the pruned feature as part of the feature that surrounds the pruned feature.</summary><remarks><PARA>
Features below a specified <see cref="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityMinPixels">size threshold</see> 
are discarded and will not appear in the results.  Calculations of measures will not consider 
pixels belonging to the pruned feature as part of the feature that surrounds the pruned feature.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants.None"><remarks><PARA>No connectivity cleanup is performed.</PARA></remarks><summary>No connectivity cleanup is performed.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants"><summary>Enumeration indicates which, or none, exclude area property is used to indicate the amount of feature to exclude for the median and bounding box measures.</summary><remarks><PARA>
An enumeration that determines how the tool excludes pixels lying at the extrema of a blob from the blob
when computing the <see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBox(Cognex.VisionPro.Blob.CogBlobAxisConstants)" />
or 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianX(Cognex.VisionPro.Blob.CogBlobAxisConstants)">median</see> measures.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants.AreaPercent"><remarks><PARA>
Specifies that the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeAreaPercent" /> 
property is used to indicate the amount of feature to exclude for the median 
and bounding box measures.  
This value is specified in terms of the percentage of pixels to exclude.
</PARA></remarks><summary>The ExtremaExcludeAreaPercent property is used to indicate the amount of feature to exclude for the median and bounding box measures.  This value is specified in terms of percentage of pixels to exclude.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants.AreaPixels"><summary>The ExtremaExcludeAreaPixels property is used to indicate the amount of feature to exclude for the median and bounding box measures.  This value is in image pixel units.</summary><remarks><PARA>
Specifies that the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeAreaPixels" /> 
property is used to indicate the amount of feature to exclude for the median 
and bounding box measures.  
This value is in image pixel units.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants.None"><summary>No area of the feature will be excluded for the median and bounding box measures.</summary><remarks><PARA>No area of the feature will be excluded for the median and bounding box measures.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants.Area"><remarks><PARA>
Specifies that the <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeArea" /> 
property is used to indicate the amount of feature to exclude for the median 
and bounding box measures.  This value is in units of input image's selected space.
</PARA></remarks><summary>The ExtremaExcludeArea property is used to indicate the amount of feature to exclude for the median and bounding box measures.  This value is in units of input image's selected space.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobLabelConstants"><summary>Enumeration of blob grey scale label constants.  The Label property of ICogBlobResult returns a value which indicate that the feature is either a blob or a hole when performing grey scale connectivity.</summary><remarks><PARA>
Enumeration of the blob grey scale connectivity label constants.  
A feature's <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.Label" />
indicates whether the feature is a blob or a hole.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLabelConstants.Hole"><remarks><PARA>
If performing grey scale connectivity, <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.Label" /> is <BOLD>Hole</BOLD> if the result represents a hole.
</PARA></remarks><summary>If performing grey scale connectivity, the Label property of ICogBlobResult will return a value equal to cogBlobLabelHole if the result represents a hole.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLabelConstants.Blob"><summary>If performing grey scale connectivity, the Label property of ICogBlobResult will return a value equal to cogBlobLabelBlob if the result represents a blob.</summary><remarks><PARA>
	If performing grey scale connectivity, <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.Label" /> is
	 <BOLD>Blob</BOLD> if the result represents a blob.
</PARA></remarks></member><member name="T:Cognex.VisionPro.Blob.CogBlobAxisConstants"><summary>Enumeration of axes that can be selected for the median &amp; bounding box measures.</summary><remarks><PARA>
Enumeration of the axes that you can specify when requesting
a <see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBox(Cognex.VisionPro.Blob.CogBlobAxisConstants)" />
or 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianX(Cognex.VisionPro.Blob.CogBlobAxisConstants)">median</see>  measure.
 </PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.PixelAlignedNoExclude"><remarks><PARA>
The bounding box and median measures are based on an 
axes aligned with the pixels of the input image.  
The <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" /> settings are ignored 
when selecting this axis which allows for a faster calculation of 
the bounding box and median measures.
</PARA></remarks><summary>The bounding box and median measures are based on an axes aligned with the pixels of the input image.  The exclude extrema settings are ignored when selecting this axis which allows for a faster calculation of the bounding box and median measures.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.PixelAligned"><remarks><PARA>The bounding box and median measures are based on an axes aligned with the pixels of the input image.</PARA></remarks><summary>The bounding box and median measures are based on an axes aligned with the pixels of the input image.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.SelectedSpace"><remarks><PARA>The bounding box and median measures are based on the coordinate axes of the selected space of the input image.</PARA></remarks><summary>The bounding box and median measures are based on the coordinate axes of the selected space of the input image.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.ExtremaAngle"><remarks><PARA>
	The bounding box and median measures are based on the
	<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> 
	specified in the selected space of the input image.
</PARA></remarks><summary>The bounding box and median measures are based on the ExtremaAngle property of ICogBlobParams.  The ExtremaAngle is specified in the selected space of the input image.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.Principal"><summary>The bounding box and median measures are based on the principal axis of the blob.</summary><remarks><PARA>The bounding box and median measures are based on the principal axis of the blob.</PARA></remarks></member><member name="T:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants"><summary>Constants used to specify desired result graphics.</summary><remarks><PARA>Constants used to specify desired result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.MedianSelectedSpace"><remarks><PARA>Draw a crosshair graphic at the point where the blob is divided in half by a pair of perpendicular lines which are aligned with the axes of the selected space of the input image.</PARA></remarks><summary>Draw a cross at the point where the blob is divided in half by a pair of perpendicular lines which are aligned with the axes of the selected space of the input image.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.MedianExtremaAngle"><summary>Draw a cross at the point where the blob is divided in half by a pair of perpendicular lines, one of which is aligned with the angle specified by ICogBlobParams::ExtremaAngle.</summary><remarks><PARA>Draw a cross at the point where the blob is divided in half by a pair of perpendicular lines, one of which is aligned with the angle specified by 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.MedianPrincipalAxis"><remarks><PARA>Draw a crosshair graphic at the point where the blob is divided in half by a pair of perpendicular lines, one of which is aligned with the principal axis of this blob.</PARA></remarks><summary>Draw a cross at the point where the blob is divided in half by a pair of perpendicular lines, one of which is aligned with the principal axis of this blob.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.MedianPixelAligned"><remarks><PARA>Draw a crosshair graphic at the point where the blob is divided in half by a pair of perpendicular lines which are aligned with the axes of the pixel space of the input image.</PARA></remarks><summary>Draw a cross at the point where the blob is divided in half by a pair of perpendicular lines which are aligned with the axes of the pixel space of the input image.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.BoundingBoxSelectedSpace"><summary>Draw the smallest rectangle that completely encloses the blob and is aligned with the selected space of the input image.</summary><remarks><PARA>Draw the smallest rectangle that completely encloses the blob and is aligned with the selected space of the input image.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.BoundingBoxExtremaAngle"><summary>Draw the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ICogBlobParams::ExtremaAngle.</summary><remarks><PARA>Draw the smallest rectangle that completely encloses the blob and is aligned with the angle specified by <see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.BoundingBoxPrincipalAxis"><remarks><PARA>Draw the smallest rectangle that completely encloses the blob and is aligned with the blob's first principal axis.</PARA></remarks><summary>Draw the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.BoundingBoxPixelAligned"><summary>Draw the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.</summary><remarks><PARA>Draw the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.Boundary"><remarks><PARA>Draw the boundary of the blob.  The boundary follows the outside edges
	of the pixels that make up the blob.</PARA></remarks><summary>Draw the boundary of the blob.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.CenterOfMass"><remarks><PARA>Draw a crosshair graphic at the center of mass of the blob.</PARA></remarks><summary>Draw a cross hair at the center of mass of the blob.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.None"><summary>Draw no result graphics.</summary><remarks><PARA>Draw no result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.All"><summary>Draw all result graphics.</summary><remarks><PARA>Draw all result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.TipText"><summary>Turn on tip text for result graphics.</summary><remarks><PARA>Turn on tip text for result graphics.</PARA></remarks></member><member name="T:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants"><summary>Enumeration of segmented images that may be obtained from the results by calling CreateSegmentedImage.</summary><remarks><PARA>Enumeration of segmented images that may be obtained from the results by calling 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants.BeforeMasking"><summary>The segmented image before masking and morphology have been performed.</summary><remarks><PARA>The segmented image before masking and morphology have been performed.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants.BeforeMorphology"><summary>The segmented image before morphology has been performed.  This image will include the effects of masking if masking was enabled.</summary><remarks><PARA>The segmented image before morphology has been performed.  This image will include the effects of masking if masking was enabled.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants.FinalImage"><remarks><PARA>The segmented blob image that was used for connectivity analysis.  This will be the segmented image after any masking or morphology had been performed.</PARA></remarks><summary>The segmented blob image that was used for connectivity analysis.  This will be the segmented image after any masking or morphology had been performed.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogBlob Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogblobtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsUnfiltered"><summary>Include graphics for all unfiltered blobs in the LastRunRecord.</summary><remarks><PARA>Include graphics for all unfiltered blobs in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsCenterOfMass"><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a cross hair at the center of mass of the blob.</PARA></remarks><summary>Include in the composite result graphics of the LastRunRecord, a cross hair at the center of mass of the blob.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundary"><summary>Include in the composite result graphics of the LastRunRecord, a graphic representing the boundary of the blob.</summary><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a graphic representing the boundary of the blob.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsMedianSelectedSpace"><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a cross at the point where the blob is divided in half by a pair of perpendicular lines which are aligned with the axes of the selected space of the input image.</PARA></remarks><summary>Include in the composite result graphics of the LastRunRecord, a cross at the point where the blob is divided in half by a pair of perpendicular lines which are aligned with the axes of the selected space of the input image.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsMedianExtremaAngle"><summary>Include in the composite result graphics of the LastRunRecord, a cross at the point where the blob is divided in half by a pair of perpendicular lines, one of which is aligned with the angle specified by ICogBlobParams::ExtremaAngle.</summary><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a cross at the point where the blob is divided in half by a pair of perpendicular lines, one of which is aligned with the angle specified by 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsMedianPrincipalAxis"><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a cross at the point where the blob is divided in half by a pair of perpendicular lines, one of which is aligned with the principal axis of this blob.</PARA></remarks><summary>Include in the composite result graphics of the LastRunRecord, a cross at the point where the blob is divided in half by a pair of perpendicular lines, one of which is aligned with the principal axis of this blob.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsMedianPixelAligned"><summary>Include in the composite result graphics of the LastRunRecord, a cross at the point where the blob is divided in half by a pair of perpendicular lines which are aligned with the axes of the pixel space of the input image.</summary><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a cross at the point where the blob is divided in half by a pair of perpendicular lines which are aligned with the axes of the pixel space of the input image.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundingBoxSelectedSpace"><summary>Include in the composite result graphics of the LastRunRecord, a graphic representing the smallest rectangle that completely encloses the blob and is aligned with the selected space of the input image.</summary><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a graphic representing the smallest rectangle that completely encloses the blob and is aligned with the selected space of the input image.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundingBoxExtremaAngle"><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a graphic representing the smallest rectangle that completely encloses the blob and is aligned with the angle specified by 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.</PARA></remarks><summary>Include in the composite result graphics of the LastRunRecord, a graphic representing the smallest rectangle that completely encloses the blob and is aligned with the angle specified by ICogBlobParams::ExtremaAngle.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundingBoxPrincipalAxis"><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a graphic representing the smallest rectangle that completely encloses the blob and is aligned with the blob's first principal axis.</PARA></remarks><summary>Include in the composite result graphics of the LastRunRecord, a graphic representing the smallest rectangle that completely encloses the blob and is aligned with the blob's principal axis.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundingBoxPixelAligned"><remarks><PARA>Include in the composite result graphics of the LastRunRecord, a graphic representing the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.</PARA></remarks><summary>Include in the composite result graphics of the LastRunRecord, a graphic representing the smallest rectangle that completely encloses the blob and is aligned with the pixels of the image.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.BlobImageAsGraphic"><remarks><PARA>Include a partially transparent graphic over the blobs &amp; holes in the input image of the LastRunRecord.  The
		<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants">ResultsUnfiltered </see>
		bit determines whether the graphic is drawn over the unfiltered blobs.</PARA></remarks><summary>Include a partially transparent graphic over the blobs &amp; holes in the input image of the LastRunRecord.  The cogBlobLastRunRecordResultsUnfiltered bit determines whether the graphic is drawn over the unfiltered blobs.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.BlobImageUnfiltered"><remarks><PARA>Include a synthetically created image of the unfiltered blobs &amp; holes in the LastRunRecord.</PARA></remarks><summary>Include a synthetically created image of the unfiltered blobs &amp; holes in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.None"><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.All"><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.BlobImage"><remarks><PARA>Include a synthetically created image of the filtered blobs &amp; holes in the LastRunRecord.</PARA></remarks><summary>Include a synthetically created image of the filtered blobs &amp; holes in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogBlob Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogblobtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.Region"><remarks><PARA>Include the region used for blob analysis in the LastRunRecord.</PARA></remarks><summary>Include the region used for blob analysis in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.Histogram"><summary>Include a histogram of the input image in the LastRunRecord.  The histogram also provides a graphical representation of the segmentation parameters used for the blob analysis.</summary><remarks><PARA>Include a histogram of the input image in the LastRunRecord.  The histogram also provides a graphical representation of the segmentation parameters used for the blob analysis.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.SubtractionImageByReference"><remarks><PARA>Include the subtraction image in the LastRunRecord. This record is only included if the segmentation mode is
		<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">SubtractionImage</see>.</PARA></remarks><summary>Include the subtraction image in the LastRunRecord.  This record is only included if the segmentation mode is cogBlobSegmentationModeSubtractionImage.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.SegmentedImageBeforeMasking"><remarks><PARA>Include a viewable version of the segmented image, before morphology and masking, in the LastRunRecord.  The SaveSegmentedImageBeforeMasking property of the run parameters must also be true in order to include this record.</PARA></remarks><summary>Include a viewable version of the segmented image, before morphology and masking, in the LastRunRecord.  The SaveSegmentedImageBeforeMasking property of the run parameters must also be true in order to include this record.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.SegmentedImageBeforeMorphology"><summary>Include a viewable version of the segmented image, before morphology, in the LastRunRecord.  The SaveSegmentedImageBeforeMorphology property of the run parameters must also be true in order to include this record.</summary><remarks><PARA>Include a viewable version of the segmented image, before morphology, in the LastRunRecord.  The SaveSegmentedImageBeforeMorphology property of the run parameters must also be true in order to include this record.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.None"><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.All"><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.InputImageMask"><summary>Include a graphic representing the input image mask in the LastRunRecord.</summary><remarks><PARA>Include a graphic representing the input image mask in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.SegmentedImage"><summary>Include a viewable version of the segmented image in the LastRunRecord.  The SaveSegmentedImage property of the run parameters must also be true in order to include this record.</summary><remarks><PARA>Include a viewable version of the segmented image in the LastRunRecord.  The SaveSegmentedImage property of the run parameters must also be true in order to include this record.</PARA></remarks></member><member name="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogBlob Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogblobtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.Region"><summary>Include the (interactive) region to be used for blob analysis in the CurrentRecord.</summary><remarks><PARA>Include the (interactive) region to be used for blob analysis in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.Histogram"><summary>Include a histogram of the input image in the CurrentRecord.  The histogram also provides a graphical representation of the segmentation parameters.</summary><remarks><PARA>Include a histogram of the input image in the CurrentRecord.  The histogram also provides a graphical representation of the segmentation parameters.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.None"><summary>Do not include any records in the CurrentRecord.</summary><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.All"><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.SubtractionImage"><remarks><PARA>Include the subtraction image in the CurrentRecord.  This record is only included if the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">segmentation mode</see> is
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">SubtractionImage</see>.
</PARA></remarks><summary>Include the subtraction image in the CurrentRecord.  This record is only included if the segmentation mode is cogBlobSegmentationModeSubtractionImage.</summary></member><member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.InputImageMask"><remarks><PARA>Include a graphic representing the input image mask in the CurrentRecord.</PARA></remarks><summary>Include a graphic representing the input image mask in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasure.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Blob.CogBlob.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member></members></doc>